{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "Examples/ROS/ORB_SLAM2/src/ros_stereo.cc",
			"settings":
			{
				"buffer_size": 5349,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/System.h",
			"settings":
			{
				"buffer_size": 7790,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/System.cc",
			"settings":
			{
				"buffer_size": 19204,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Examples/ROS/ORB_SLAM2/src/ros_mono.cc",
			"settings":
			{
				"buffer_size": 2463,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/ORBVocabulary.h",
			"settings":
			{
				"buffer_size": 1328,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/KeyFrameDatabase.h",
			"settings":
			{
				"buffer_size": 2557,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/KeyFrameDatabase.cc",
			"settings":
			{
				"buffer_size": 12790,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Tracking.h",
			"settings":
			{
				"buffer_size": 11015,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tracking.cc",
			"settings":
			{
				"buffer_size": 75658,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Map.h",
			"settings":
			{
				"buffer_size": 3890,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Map.cc",
			"settings":
			{
				"buffer_size": 4021,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/MapDrawer.h",
			"settings":
			{
				"buffer_size": 2592,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/MapDrawer.cc",
			"settings":
			{
				"buffer_size": 9270,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/ORBextractor.h",
			"settings":
			{
				"buffer_size": 6631,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ORBextractor.cc",
			"settings":
			{
				"buffer_size": 66175,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/LocalMapping.h",
			"settings":
			{
				"buffer_size": 5583,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/LocalMapping.cc",
			"settings":
			{
				"buffer_size": 34765,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/LoopClosing.h",
			"settings":
			{
				"buffer_size": 7148,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/LoopClosing.cc",
			"settings":
			{
				"buffer_size": 39280,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/types/sim3.h",
			"settings":
			{
				"buffer_size": 6948,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Frame.h",
			"settings":
			{
				"buffer_size": 15127,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Frame.cc",
			"settings":
			{
				"buffer_size": 40019,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/KeyFrame.h",
			"settings":
			{
				"buffer_size": 12778,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/KeyFrame.cc",
			"settings":
			{
				"buffer_size": 25973,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Converter.h",
			"settings":
			{
				"buffer_size": 4902,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Converter.cc",
			"settings":
			{
				"buffer_size": 5464,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/types/se3quat.h",
			"settings":
			{
				"buffer_size": 8168,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/FrameDrawer.h",
			"settings":
			{
				"buffer_size": 2639,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/FrameDrawer.cc",
			"settings":
			{
				"buffer_size": 8353,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Viewer.h",
			"settings":
			{
				"buffer_size": 3259,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Viewer.cc",
			"settings":
			{
				"buffer_size": 8548,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h",
			"settings":
			{
				"buffer_size": 42480,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/MapPoint.h",
			"settings":
			{
				"buffer_size": 8998,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/MapPoint.cc",
			"settings":
			{
				"buffer_size": 17004,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/ORBmatcher.h",
			"settings":
			{
				"buffer_size": 9924,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ORBmatcher.cc",
			"settings":
			{
				"buffer_size": 64286,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Optimizer.h",
			"settings":
			{
				"buffer_size": 6939,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Optimizer.cc",
			"settings":
			{
				"buffer_size": 55484,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/types/types_sba.h",
			"settings":
			{
				"buffer_size": 2045,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/types/types_sba.cpp",
			"settings":
			{
				"buffer_size": 1905,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h",
			"settings":
			{
				"buffer_size": 5634,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/types/types_six_dof_expmap.h",
			"settings":
			{
				"buffer_size": 6116,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Initializer.h",
			"settings":
			{
				"buffer_size": 12021,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Initializer.cc",
			"settings":
			{
				"buffer_size": 55325,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/PnPsolver.h",
			"settings":
			{
				"buffer_size": 14611,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/PnPsolver.cc",
			"settings":
			{
				"buffer_size": 47158,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Sim3Solver.h",
			"settings":
			{
				"buffer_size": 7599,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Sim3Solver.cc",
			"settings":
			{
				"buffer_size": 16439,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 467 files for \"//?\"\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/include/KeyFrame.h:\n  364      DBoW2::BowVector mBowVec; ///< Vector of words to represent images 当前图像的词袋模型表示\n  365      // 记录node id及其对应的图像 feature对应的索引\n  366:     DBoW2::FeatureVector mFeatVec; ///< Vector of nodes with indexes of local features //?\n  367  \n  368      /// Pose relative to parent (this is computed when bad flag is activated)\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/include/LocalMapping.h:\n   58      /**\n   59       * @brief 构造函数\n   60:      * @param[in] pMap          局部地图的句柄？ //?\n   61       * @param[in] bMonocular    当前系统是否是单目输入\n   62       */\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/include/LoopClosing.h:\n   43  #include <thread>\n   44  #include <mutex>\n   45: //? 目前并不知道是用来做什么的\n   46  #include \"Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h\"\n   47  \n   ..\n  224      /// 全局BA线程是否在进行\n  225      bool mbRunningGBA;\n  226:     /// 全局BA线程在收到停止请求之后是否停止的比标志 //? 可是直接使用上面变量的逆不就可以表示了吗? //? 表示全局BA工作是否正常结束?\n  227      bool mbFinishedGBA;\n  228      /// 由当前线程调用,请求停止当前正在进行的全局BA\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/include/Map.h:\n  152      // This avoid that two points are created simultaneously in separate threads (id conflict)\n  153      ///为了避免地图点id冲突设计的互斥量\n  154:     //? 如果插入的地图点id不同,但是由于误差等原因,产生的地图点非常相近,这个时候怎么处理?\n  155      std::mutex mMutexPointCreation;\n  156  \n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/include/MapPoint.h:\n   61       * @param[in] Pos       MapPoint的坐标（wrt世界坐标系）\n   62       * @param[in] pRefKF    KeyFrame\n   63:      * @param[in] pMap      Map  //? 是输出吗\n   64       */\n   65      MapPoint(const cv::Mat &Pos, KeyFrame* pRefKF, Map* pMap);\n   ..\n   67       * @brief 给定坐标与frame构造MapPoint\n   68       * @detials 被双目：UpdateLastFrame()调用\n   69:      * @param[in] Pos       MapPoint的坐标（wrt世界坐标系）  //? wrt世界坐标系, 是什么意思? \n   70       * @param[in] pMap      Map\n   71       * @param[in] pFrame    Frame\n   ..\n   93      /**\n   94       * @brief 获取生成当前地图点的参考关键帧\n   95:      * //? 那么对于由\"当前帧\"生成的地图点怎么办? \n   96       * @return KeyFrame* \n   97       */\n   ..\n  142      /**\n  143       * @brief 告知可以观测到该MapPoint的Frame，该MapPoint已被删除\n  144:      * //? 最好亲自查看一下这个函数是在哪里被调用的\n  145       */\n  146      void SetBadFlag();\n  ...\n  161      void Replace(MapPoint* pMP);\n  162      /**\n  163:      * @brief 获取取代当前地图点的点? //?\n  164       * \n  165:      * @return MapPoint* //?\n  166       */\n  167      MapPoint* GetReplaced();\n  ...\n  184       */\n  185      void IncreaseFound(int n=1);\n  186:     //? 这个比例是?\n  187      float GetFoundRatio();\n  188      /**\n  ...\n  218      void UpdateNormalAndDepth();\n  219  \n  220:     //?\n  221      float GetMinDistanceInvariance();\n  222:     //?\n  223      float GetMaxDistanceInvariance();\n  224:     //? 尺度预测?\n  225      int PredictScale(const float &currentDist, KeyFrame*pKF);\n  226:     //? \n  227      int PredictScale(const float &currentDist, Frame* pF);\n  228  \n  ...\n  240      float mTrackProjY;             ///< 当前地图点投影到某帧上后的坐标\n  241      float mTrackProjXR;            ///< 当前地图点投影到某帧上后的坐标(右目)\n  242:     int mnTrackScaleLevel;         ///< 所处的尺度, 由其他的类进行操作 //?\n  243      float mTrackViewCos;           ///< 被追踪到时,那帧相机看到当前地图点的视角\n  244      // TrackLocalMap - SearchByProjection 中决定是否对该点进行投影的变量\n  245      // NOTICE mbTrackInView==false的点有几种：\n  246      // a 已经和当前帧经过匹配（TrackReferenceKeyFrame，TrackWithMotionModel）但在优化过程中认为是外点\n  247:     // b 已经和当前帧经过匹配且为内点，这类点也不需要再进行投影   //? 为什么已经是内点了之后就不需要再进行投影了呢? \n  248:     // c 不在当前相机视野中的点（即未通过isInFrustum判断）     //? \n  249      bool mbTrackInView;    //决定一个地图点是否进行重投影的标志\n  250      // TrackLocalMap - UpdateLocalPoints 中防止将MapPoints重复添加至mvpLocalMapPoints的标记\n  ...\n  285      // Mean viewing direction\n  286      // 该MapPoint平均观测方向\n  287:     //? 为什么要做这个呢? ORBmatcher.cc中用到此向量，确定搜索区域\n  288      cv::Mat mNormalVector;\n  289  \n  ...\n  291      // 每个3D点也有一个descriptor\n  292      // 如果MapPoint与很多帧图像特征点对应（由keyframe来构造时），那么距离其它描述子的平均距离最小的描述子是最佳描述子\n  293:     //? MapPoint只与一帧的图像特征点对应（由frame来构造时），那么这个特征点的描述子就是该3D点的描述子 --  其实就是初始描述子呗 \n  294:     //? 一个变量不能代表两重含义吧\n  295      cv::Mat mDescriptor; ///< 通过 ComputeDistinctiveDescriptors() 得到的最优描述子\n  296  \n  297      /// Reference KeyFrame\n  298:     //? 什么意思? 就是生成它的关键帧吗? \n  299      // 解释：通常情况下MapPoint的参考关键帧就是创建该MapPoint的那个关键帧\n  300      KeyFrame* mpRefKF;\n  ...\n  306      /// Bad flag (we do not currently erase MapPoint from memory)\n  307      bool mbBad;\n  308:     //? 替换本地图点的点? \n  309      MapPoint* mpReplaced;\n  310  \n  311      /// Scale invariance distances\n  312:     //? \n  313      float mfMinDistance;\n  314      float mfMaxDistance;\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/include/ORBmatcher.h:\n  230       * @param[in] kp2   特征点2\n  231       * @param[in] F12   两帧之间的基础矩阵\n  232:      * @param[in] pKF   //? 关键帧?\n  233       * @return true \n  234       * @return false \n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/include/Sim3Solver.h:\n  152      std::vector<MapPoint*> mvpMatches12;        ///< 下标是当前关键帧中特征点的id,内容是对应匹配的,闭环关键帧中的地图点\n  153      std::vector<size_t> mvnIndices1;            ///< 有效的匹配关系,在 vpMatched12 (构造函数) 中的索引\n  154:     std::vector<size_t> mvSigmaSquare1;         ///< //? 这个变量好像是没有被用到\n  155:     std::vector<size_t> mvSigmaSquare2;         ///< //? 这个变量好像是没有被用到\n  156      std::vector<size_t> mvnMaxError1;           ///< 当前关键帧中的某个特征点所允许的最大不确定度(和所在的金字塔图层有关)\n  157      std::vector<size_t> mvnMaxError2;           ///< 闭环关键帧中的某个特征点所允许的最大不确定度(同上)\n  ...\n  198  \n  199      // Threshold inlier/outlier. e = dist(Pi,T_ij*Pj)^2 < 5.991*mSigma2\n  200:     float mTh;                                  ///< //? 没有使用到的变量\n  201:     float mSigma2;                              ///< //? 没有使用到的变量\n  202  \n  203      // Calibration\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/include/Tracking.h:\n  141      // TODO: Modify MapPoint::PredictScale to take into account focal lenght\n  142      /**\n  143:      * @brief //? 看样子是和更新设置有关系\n  144       * \n  145       * @param[in] strSettingPath 配置文件路径\n  ...\n  180      ///追踪线程中有一个当前帧\n  181      Frame mCurrentFrame;\n  182:     ///> 还有当前帧的灰度图像 //? 提问,那么在双目输入和在RGBD输入的时候呢? \n  183      ///>                        在双目输入和在RGBD输入时，为左侧图像的灰度图\n  184      cv::Mat mImGray;\n  ...\n  203      ///参考关键帧\n  204      list<KeyFrame*> mlpReferences;\n  205:     ///所有帧的时间戳  //? 还是关键帧的时间戳?\n  206      list<double> mlFrameTimes;\n  207      ///是否跟丢的标志\n  ...\n  280      void UpdateLocalMap();\n  281      \n  282:     /** @brief 更新局部地图点? //?? */\n  283      void UpdateLocalPoints();\n  284      /** @brief 跟新局部关键帧 */\n  285:     //? 局部关键帧 ,有什么含义? 是否有对应的全局关键帧?\n  286      void UpdateLocalKeyFrames();\n  287  \n  ...\n  350      \n  351      // System\n  352:     ///指向系统实例的指针  //? 有什么用?\n  353      System* mpSystem;\n  354      \n  ...\n  376      ///和新建关键帧,以及重定位有关\n  377      int mMinFrames;\n  378:     int mMaxFrames;         //? 貌似和图像的帧率有关\n  379  \n  380      // Threshold close/far points\n  ...\n  403  \n  404      //Motion Model\n  405:     ///运动模型 //? 我知道是恒速模型,但是具体上保存的是什么呢?矩阵的数据组织格式又是什么?\n  406      cv::Mat mVelocity;\n  407  \n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/include/Viewer.h:\n  127      bool mbFinished;\n  128      ///线程锁对象,用于锁住和finsh,终止当前查看器进程相关的变量\n  129:     //? 但是我现在还是不明白,它是怎么知道我的这个线程锁对象和我的这个线程产生绑定关系的\n  130      std::mutex mMutexFinish;\n  131  \n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Frame.cc:\n  671  \n  672      // 检查需要搜索的图像金字塔层数范围是否符合要求\n  673:     //? 疑似bug。(minLevel>0) 后面条件 (maxLevel>=0)肯定成立\n  674:     //? 改为 const bool bCheckLevels = (minLevel>=0) || (maxLevel>=0);\n  675      const bool bCheckLevels = (minLevel>0) || (maxLevel>=0);\n  676  \n  ...\n  698                      if(kpUn.octave<minLevel)\n  699                          continue;\n  700:                     if(maxLevel>=0)\t\t//? 为何特意又强调？感觉多此一举\n  701                          if(kpUn.octave>maxLevel)\n  702                              continue;\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/FrameDrawer.cc:\n  202          1,                          //字体缩放\n  203          1,                          //粗细\n  204:         &baseline);                 //基线,相对于最低端的文本点的,y坐标  //? 不是太明白\n  205      //扩展图像\n  206      imText = cv::Mat(im.rows+textSize.height+10,im.cols,im.type());\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Initializer.cc:\n 1695  \n 1696  \t\t//判断视差角，只有视差角稍稍大一丢丢的才会给打good点标记\n 1697: \t\t//? bug 我觉得这个写的位置不太对。你的good点计数都++了然后才判断，不是会让good点标志和good点计数不一样吗\n 1698          if(cosParallax<0.99998)\n 1699              vbGood[vMatches12[i].first]=true;\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/KeyFrame.cc:\n   85          vector<cv::Mat> vCurrentDesc = Converter::toDescriptorVector(mDescriptors);\n   86          // Feature vector associate features with nodes in the 4th level (from leaves up)\n   87:         // We assume the vocabulary tree has 6 levels, change the 4 otherwise  //?\n   88          mpORBvocabulary->transform(vCurrentDesc,mBowVec,mFeatVec,4);\n   89      }\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/LocalMapping.cc:\n  358      {\n  359          // 下面的过程会比较耗费时间,因此如果有新的关键帧需要处理的话,就先去处理新的关键帧吧\n  360:         //? 这样会不会造成累积的待处理关键帧逐渐增多\n  361          if(i>0 && CheckNewKeyFrames())\n  362              return;\n  ...\n  599                  continue;*/\n  600              // ratioDist*ratioFactor < ratioOctave 或 ratioDist/ratioOctave > ratioFactor表明尺度变化是连续的\n  601:             //? 还不是非常明白,感觉这里的意思大致应该就是, 深度值的比例和图像金字塔的比例不应该差太多\n  602              // ratioDist < (ratioOctave/ratioFactor) , ratioDist > (ratioOctave*ratioFactor) ,中间那一段不行\n  603              if(ratioDist*ratioFactor<ratioOctave || ratioDist>ratioOctave*ratioFactor)\n  ...\n  825  \n  826  // 释放当前还在缓冲区中的关键帧指针\n  827: //? ! 现在感觉之前的理解好像有问题,这个函数由LoopClosing在执行了回环的关键帧组优化之后调用的,是为了恢复LoopMapping线程的正常工作的\n  828  void LocalMapping::Release()\n  829  {\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/LoopClosing.cc:\n  916      // 10是迭代次数\n  917      // mbStopGBA直接传引用过去了,这样当有外部请求的时候这个优化函数能够及时相应并且结束掉\n  918:     //? 提问:进行完这个过程后我们能够获得哪些信息?\n  919      // 目测是能够得到全部关键帧优化后的位姿,以及部分地图点优化之后的位姿\n  920      Optimizer::GlobalBundleAdjustemnt(mpMap,        // 地图点对象\n  ...\n  974                          // (对于坐标系中的点的话)从父关键帧到当前子关键帧的位姿变换\n  975                          cv::Mat Tchildc = pChild->GetPose()*Twc;\n  976:                         // （对于坐标系中的点）再利用优化后的父关键帧的位姿，转换到世界坐标系下 --  //? 算是得到了这个子关键帧的优化后的位姿啦？\n  977                          // 这种最小生成树中除了根节点，其他的节点都会作为其他关键帧的子节点，这样做可以使得最终所有的关键帧都得到了优化\n  978                          pChild->mTcwGBA = Tchildc*pKF->mTcwGBA;//*Tcorc*pKF->mTcwGBA;\n  ...\n 1013  \n 1014                      // 说明这个关键帧，在前面的过程中也没有因为“当前关键帧”得到全局BA优化 \n 1015:                     //? 可是,为什么会出现这种情况呢? 难道是因为这个地图点的参考关键帧设置成为了bad?\n 1016                      if(pRefKF->mnBAGlobalForKF!=nLoopKF)\n 1017                          continue;\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/MapPoint.cc:\n   28  \n   29  long unsigned int MapPoint::nNextId=0;\n   30: //? 记得查看它都在什么地方被使用\n   31  mutex MapPoint::mGlobalMutex;\n   32  \n   ..\n   48      mnTrackReferenceForFrame(0),            //放置被重复添加到局部地图点的标记\n   49      mnLastFrameSeen(0),                     //是否决定判断在某个帧视野中的变量\n   50:     mnBALocalForKF(0),                      //?\n   51:     mnFuseCandidateForKF(0),                //?\n   52:     mnLoopPointForKF(0),                    //?\n   53:     mnCorrectedByKF(0),                     //?\n   54:     mnCorrectedReference(0),                //?\n   55:     mnBAGlobalForKF(0),                     //? \n   56:     mpRefKF(pRefKF),                        //? 参考关键帧? 是什么意思\n   57      mnVisible(1),                           //在帧中的可视次数\n   58      mnFound(1),                             //被找到的次数 和上面的相比要求能够匹配上\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Optimizer.cc:\n  159          const int id = pMP->mnId+maxKFid+1;\n  160          vPoint->setId(id);\n  161:         //? 这里难道还有边缘化的操作？\n  162          vPoint->setMarginalized(true);\n  163          optimizer.addVertex(vPoint);\n  ...\n  779          int id = pMP->mnId+maxKFid+1;\n  780          vPoint->setId(id);\n  781:         vPoint->setMarginalized(true);  //? 一直不明白这个是做什么的,设置可以被边缘化?\n  782          optimizer.addVertex(vPoint);\n  783  \n  ...\n 1146              sInsertedEdges.insert(make_pair(min(nIDi,nIDj),max(nIDi,nIDj)));\n 1147          } // 对于当前关键帧nIDi而言，遍历每一个新添加的关键帧nIDj链接关系\n 1148:     }// 遍历所有添加了新的共视关系的关键帧(//? 可能表述不太合适)\n 1149  \n 1150      // Set normal edges\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/ORBextractor.cc:\n  861                          vSizeAndPointerToNode.push_back(make_pair(n1.vKeys.size(),&lNodes.front()));\n  862  \n  863: \t\t\t\t\t\t//?这个访问用的句柄貌似并没有用到？\n  864                          // lNodes.front().lit 和前面的迭代的lit 不同，只是名字相同而已\n  865                          // lNodes.front().lit是node结构体里的一个指针用来记录节点的位置\n  ...\n  901  \n  902                  //当这个母节点expand之后就从列表中删除它了，能够进行分裂操作说明至少有一个子节点的区域中特征点的数量是>1的\n  903:                 //? 分裂方式是后加的先分裂，先加的后分裂。\n  904                  lit=lNodes.erase(lit);\n  905  \n  ...\n  924          //可以展开的子节点个数nToExpand x3，是因为一分四之后，会删除原来的主节点，所以乘以3\n  925          /**\n  926: \t\t * //?BUG 但是我觉得这里有BUG，虽然最终作者也给误打误撞、稀里糊涂地修复了\n  927  \t\t * 注意到，这里的nToExpand变量在前面的执行过程中是一直处于累计状态的，如果因为特征点个数太少，跳过了下面的else-if，又进行了一次上面的遍历\n  928  \t\t * list的操作之后，lNodes.size()增加了，但是nToExpand也增加了，尤其是在很多次操作之后，下面的表达式：\n  ...\n 1691  \t\t//全尺寸图像。包括无效图像区域的大小。将图像进行“补边”，EDGE_THRESHOLD区域外的图像不进行FAST角点检测\n 1692          Size wholeSize(sz.width + EDGE_THRESHOLD*2, sz.height + EDGE_THRESHOLD*2);\n 1693: \t\t//?声明两个临时变量，temp貌似并未使用，masktemp并未使用\n 1694          Mat temp(wholeSize, image.type()), masktemp;\n 1695  \t\t//把图像金字塔该图层的图像copy给temp（这里为浅拷贝，内存相同）\n ....\n 1732          {\n 1733  \t\t\t//对于底层图像，直接就扩充边界了\n 1734:             //?temp 是在循环内部新定义的，在该函数里又作为输出，并没有使用啊！\n 1735              copyMakeBorder(image,\t\t\t//这里是原图像\n 1736  \t\t\t\t\t\t   temp, EDGE_THRESHOLD, EDGE_THRESHOLD, EDGE_THRESHOLD, EDGE_THRESHOLD,\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/ORBmatcher.cc:\n   72      int nmatches=0;\n   73  \n   74:     //? 是否需要进行更加粗糙的搜索 可是为什么这么写\n   75      const bool bFactor = th!=1.0;\n   76  \n   ..\n  945                      \n  946                      // 计算idx1与idx2在两个关键帧中对应特征点的描述子距离\n  947:                     //? dist是不是应该加个上限的约束，仅仅有下限约束，可能会引起一定量的误匹配\n  948                      const int dist = DescriptorDistance(d1,d2);\n  949                      \n  ...\n  954                      const cv::KeyPoint &kp2 = pKF2->mvKeysUn[idx2];\n  955  \n  956:                     //? 为什么双目就不需要判断像素点到极点的距离的判断？\n  957                      if(!bStereo1 && !bStereo2)\n  958                      {\n  ...\n 1014  \n 1015      // 旋转检查\n 1016:     //? 是不是为了保证旋转不变性，只保留旋转方向一致性最多的特征匹配对\n 1017      if(mbCheckOrientation)\n 1018      {\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/PnPsolver.cc:\n  557      double k = sqrt(dc[i - 1] / number_of_correspondences);\n  558      for(int j = 0; j < 3; j++)\n  559:       //? 但是这里为什么要乘k？\n  560        cws[i][j] = cws[0][j] + k * uct[3 * (i - 1) + j];\n  561    }\n  ...\n  620  // |ai1 0    -ai1*ui, ai2  0    -ai2*ui, ai3 0   -ai3*ui, ai4 0   -ai4*ui|\n  621  // |0   ai1  -ai1*vi, 0    ai2  -ai2*vi, 0   ai3 -ai3*vi, 0   ai4 -ai4*vi|\n  622: // 其中i从0到4 -- //? 这里师兄写错了吧!!!! 是j从0到4,但是上面已经完善了\n  623  // 应该是这个样子:\n  624  // |ai1*fu, 0,      ai1(uc-ui),|  ai2*fu, 0,      ai2(uc-ui),|  ai3*fu, 0,      ai3(uc-ui),|  ai4*fu, 0,      ai4(uc-ui)| \n  ...\n  722    // step 4.3 分情况计算N=2,3,4时能够求解得到的相机位姿R,t并且得到平均重投影误差\n  723    double Betas[4][4],         // 本质上就四个beta1~4,但是这里有四种情况(第一维度表示)\n  724:          rep_errors[4];       //? 迭代误差? 重投影误差?\n  725    double Rs[4][3][3],         //每一种情况迭代优化后得到的旋转矩阵\n  726           ts[4][3];            //每一种情况迭代优化后得到的平移向量\n  ...\n 1251  void PnPsolver::qr_solve(CvMat * A, CvMat * b, CvMat * X)\n 1252  {\n 1253:   static int max_nr = 0;        //? 静态的,存储运行这个程序历史上的最大的系数矩阵行数?\n 1254:   static double * A1, * A2;     //? unkown\n 1255  \n 1256    const int nr = A->rows;       // 系数矩阵A的行数\n ....\n 1287      }\n 1288  \n 1289:     //? 判断靠谱不? 由于系数矩阵是雅克比,并且代价函数中的L元素都是二次项的形式,所以原则上都应该是大于0的\n 1290      if (eta == 0) \n 1291      {\n ....\n 1356        ppAij += nc;\n 1357      }\n 1358:     //? 但是后面我就看不懂了\n 1359      tau /= A1[j];\n 1360      ppAij = ppAjj;\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Sim3Solver.cc:\n  105              const float sigmaSquare2 = pKF2->mvLevelSigma2[kp2.octave];\n  106  \n  107:             //? 这个数值9.210是怎么确定的\n  108:             //? 以及这个计算出来的数值最后将会用在什么地方? 内点的验证?\n  109              mvnMaxError1.push_back(9.210*sigmaSquare1);\n  110              mvnMaxError2.push_back(9.210*sigmaSquare2);\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Tracking.cc:\n  432      // Get Map Mutex -> Map cannot be changed\n  433      // 上锁。保证地图不会发生变化\n  434:     //? 疑问:这样子会不会影响地图的更新?\n  435      // 回答：主要耗时在构造帧中特征点的提取和匹配部分,在那个时候地图是没有被上锁的,有足够的时间更新地图\n  436      unique_lock<mutex> lock(mpMap->mMutexMapUpdate);\n  ...\n  547                          // if(!bOK)\n  548                          //    bOK = TrackReferenceKeyFrame();\n  549:                         //? 所以原作者为什么不加呢? \n  550                      }\n  551                      else\n  ...\n  630          // step 2.2：在帧间匹配得到初始的姿态后，现在对local map进行跟踪得到更多的匹配，并优化当前位姿\n  631          // NOTICE local map:当mpReferenceKF前帧、当前帧的MapPoints、当前关键帧与其它关键帧共视关系\n  632:         //? 没有其他帧的地图点mpReferenceKF吗? \n  633          // 在步骤2.1中主要是两mpReferenceKF两跟踪（恒速模型跟踪上一帧、跟踪参考帧），这里搜索局部关键帧后搜集所有局部MapPoints，\n  634          // 然后将局部MapPointsmpReferenceKF和当前帧进行投影匹配，得到更多匹配的MapPoints后进行Pose优化\n  ...\n  668                  // step 2.3：更新恒速运动模型 TrackWithMotionModel 中的mVelocity\n  669                  cv::Mat LastTwc = cv::Mat::eye(4,4,CV_32F);\n  670:                 //? 这个是转换成为了相机相对世界坐标系的旋转?\n  671                  mLastFrame.GetRotationInverse().copyTo(LastTwc.rowRange(0,3).colRange(0,3));\n  672                  mLastFrame.GetCameraCenter().copyTo(LastTwc.rowRange(0,3).col(3));\n  ...\n  682              // Clean VO matches\n  683              // step 2.4：清除UpdateLastFrame中为当前帧临时添加的MapPoints   \n  684:             //? \n  685              for(int i=0; i<mCurrentFrame.N; i++)\n  686              {\n  ...\n  699              // 步骤2.4中只是在当前帧中将这些MapPoints剔除，这里从MapPoints数据库中删除\n  700              // 这里生成的仅仅是为了提高双目或rgbd摄像头的帧间跟踪效果，用完以后就扔了，没有添加到地图中\n  701:             //? 为什么生成这些可以提高帧间跟踪效果?\n  702:             //? 为什么单目就不能够生成地图点呢\n  703              for(list<MapPoint*>::iterator lit = mlpTemporalPoints.begin(), lend =  mlpTemporalPoints.end(); lit!=lend; lit++)\n  704              {\n  ...\n  826                  // b.从众多观测到该MapPoint的特征点中挑选区分度最高的描述子\n  827                  \n  828:                 //? 如何定义的这个区分度?\n  829                  pNewMP->ComputeDistinctiveDescriptors();\n  830                  // c.更新该MapPoint平均观测方向以及观测距离的范围\n  ...\n  854  \n  855          mvpLocalKeyFrames.push_back(pKFini);\n  856:         //? 这个局部地图点竟然..不在mpLocalMapper中管理?\n  857          // 我现在的想法是，这个点只是暂时被保存在了 Tracking 线程之中， 所以称之为 local \n  858          // 初始化之后，通过双目图像生成的地图点，都应该被认为是局部地图点\n  ...\n  864          // ReferenceMapPoints是DrawMapPoints函数画图的时候用的\n  865          mpMap->SetReferenceMapPoints(mvpLocalMapPoints);\n  866:         //? 设置原点?\n  867          mpMap->mvpKeyFrameOrigins.push_back(pKFini);\n  868  \n  ...\n 1078      // step 6：!!!将MapPoints的中值深度归一化到1，并归一化两帧之间变换      NOTICE\n 1079      // 评估关键帧场景深度，q=2表示中值\n 1080:     //? 为什么是 pKFini 而不是 pKCur ?\n 1081      float medianDepth = pKFini->ComputeSceneMedianDepth(2);\n 1082      float invMedianDepth = 1.0f/medianDepth;\n ....\n 1099      // Scale points\n 1100      // 把3D点的尺度也归一化到1\n 1101:     //? 为什么是pKFini? 是不是就算是使用 pKFcur 得到的结果也是相同的? \n 1102      vector<MapPoint*> vpAllMapPoints = pKFini->GetMapPointMatches();\n 1103      for(size_t iMP=0; iMP<vpAllMapPoints.size(); iMP++)\n ....\n 1143   * @see LocalMapping::SearchInNeighbors()\n 1144   */\n 1145: //? 目测会发生替换,是因为合并三角化之后特别近的点吗? \n 1146  void Tracking::CheckReplacedInLastFrame()\n 1147  {\n ....\n 1295          if(!pMP)\n 1296              bCreateNew = true;\n 1297:         else if(pMP->Observations()<1)      //? 从地图点被创建后就没有观测到,意味这是在上一帧中新添加的地图点吗\n 1298          {\n 1299              bCreateNew = true;\n ....\n 1312              MapPoint* pNewMP = new MapPoint(\n 1313                  x3D,            //该点对应的空间点坐标\n 1314:                 mpMap,          //? 不明白为什么还要有这个参数\n 1315                  &mLastFrame,    //存在这个特征点的帧(上一帧)\n 1316                  i);             //特征点id\n 1317  \n 1318:             //? 上一帧在处理结束的时候,没有进行添加的操作吗?\n 1319              mLastFrame.mvpMapPoints[i]=pNewMP; // 添加新的MapPoint\n 1320  \n ....\n 1469                      // 该MapPoint被其它关键帧观测到过\n 1470                      //NOTICE 注意这里的\"Obervation\"和上面的\"Found\"并不是一个东西\n 1471:                     //? 那么区别又在哪里呢?\n 1472                      if(mCurrentFrame.mvpMapPoints[i]->Observations()>0)\n 1473                          mnMatchesInliers++;\n ....\n 1562      {\n 1563          // There are no visual odometry matches in the monocular case\n 1564:         //? 提问:究竟什么才是 visual odometry matches ?\n 1565          nMap=1;\n 1566          nTotal=1;\n ....\n 1575      float thRefRatio = 0.75f;\n 1576      if(nKFs<2)\n 1577:         thRefRatio = 0.4f;// 关键帧只有一帧，那么插入关键帧的阈值设置很低 //? 这句话不应该放在下面这句话的后面吗? \n 1578      if(mSensor==System::MONOCULAR)\n 1579          thRefRatio = 0.9f;//单目情况下插入关键帧的阈值很高\n ....\n 1627              else\n 1628                  //对于单目情况,就直接无法插入关键帧了\n 1629:                 //? 为什么这里对单目情况的处理不一样?\n 1630                  return false;\n 1631          }\n ....\n 1882   *\n 1883   * 遍历当前帧的MapPoints，将观测到这些MapPoints的关键帧和相邻的关键帧取出，更新 mvpLocalKeyFrames\n 1884:  * //?怎么定义\"相邻关键帧?\" -- 从程序中来看指的就是他们的具有较好的共视关键帧,以及其父关键帧和子关键帧\n 1885   */\n 1886  void Tracking::UpdateLocalKeyFrames()\n ....\n 1913          return;\n 1914  \n 1915:     //? 存储具有最多观测次数的关键帧?\n 1916      int max=0;\n 1917      KeyFrame* pKFmax= static_cast<KeyFrame*>(NULL);\n ....\n 1920      // 先清空局部关键帧\n 1921      mvpLocalKeyFrames.clear();\n 1922:     //? 提问:为什么要乘3呢? \n 1923      mvpLocalKeyFrames.reserve(3*keyframeCounter.size());\n 1924  \n ....\n 1943          \n 1944          // mnTrackReferenceForFrame防止重复添加局部关键帧\n 1945:         //? 这里我可以理解成为,某个关键帧已经被设置为当前帧的 局部关键帧了吗?\n 1946          pKF->mnTrackReferenceForFrame = mCurrentFrame.mnId;\n 1947      }\n ....\n 2074          KeyFrame* pKF = vpCandidateKFs[i];\n 2075          if(pKF->isBad())\n 2076:             //? 前面的查找候选关键帧的时候,为什么不会检查一下这个呢? 为什么非要返回bad的关键帧呢? 关键帧为bad意味着什么呢? \n 2077:             //? 此外这个变量的初始值也不一定全部都是false吧\n 2078              vbDiscarded[i] = true;\n 2079          else\n ....\n 2303  }\n 2304  \n 2305: //? 目测是根据配置文件中的参数重新改变已经设置在系统中的参数,但是当前文件中没有找到对它的调用\n 2306  void Tracking::ChangeCalibration(const string &strSettingPath)\n 2307  {\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Viewer.cc:\n  150              //当之前没有在跟踪相机时\n  151              s_cam.SetModelViewMatrix(\n  152:                 pangolin::ModelViewLookAt(mViewpointX,mViewpointY,mViewpointZ, 0,0,0,0.0,-1.0, 0.0));   //? 不知道这个视角设置的具体作用和\n  153              s_cam.Follow(Twc);\n  154              bFollow = true;\n\n109 matches across 23 files\n\n\nSearching 467 files for \"//step\"\n\n0 matches\n\nSearching 467 files for \"// step\"\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/Examples/Monocular/mono_euroc.cc:\n   43  int main(int argc, char **argv)\n   44  {\n   45:     // step 0 检查输入参数个数是否足够\n   46      if(argc != 5)\n   47      {\n   ..\n   50      }\n   51  \n   52:     // step 1 加载图像\n   53      // Retrieve paths to images\n   54      // 图像序列的文件名字符串序列\n   ..\n   70      }\n   71  \n   72:     // step 2 加载SLAM系统\n   73      // Create SLAM system. It initializes all system threads and gets ready to process frames.\n   74      ORB_SLAM2::System SLAM(\n   ..\n   78          true);                              // 启用可视化查看器\n   79  \n   80:     // step 3 运行前准备\n   81      // Vector for tracking time statistics\n   82      // 统计追踪一帧耗时 (仅Tracker线程)\n   ..\n   89  \n   90      // Main loop\n   91:     // step 4 依次追踪序列中的每一张图像\n   92      cv::Mat im;\n   93      for(int ni=0; ni<nImages; ni++)\n   94      {\n   95          // Read image from file\n   96:         // step 4.1 读根据前面获得的图像文件名读取图像,读取过程中不改变图像的格式 \n   97          im = cv::imread(vstrImageFilenames[ni],CV_LOAD_IMAGE_UNCHANGED);\n   98          double tframe = vTimestamps[ni];\n   99  \n  100:         // step 4.2 图像的合法性检查\n  101          if(im.empty())\n  102          {\n  ...\n  106          }\n  107  \n  108:         // step 4.3 开始计时\n  109  #ifdef COMPILEDWITHC11\n  110          std::chrono::steady_clock::time_point t1 = std::chrono::steady_clock::now();\n  ...\n  114  \n  115          // Pass the image to the SLAM system\n  116:         // step 4.4 追踪当前图像\n  117          SLAM.TrackMonocular(im,tframe);\n  118  \n  119:         // step 4.5 追踪完成,停止当前帧的图像计时, 并计算追踪耗时\n  120  \n  121  #ifdef COMPILEDWITHC11\n  ...\n  130  \n  131          // Wait to load the next frame\n  132:         // step 4.6 根据图像时间戳中记录的两张图像之间的时间和现在追踪当前图像所耗费的时间,继续等待指定的时间以使得下一张图像能够\n  133          // 按照时间戳被送入到SLAM系统中进行跟踪\n  134          double T=0;\n  ...\n  142      }\n  143  \n  144:     // step 5 如果所有的图像都预测完了,那么终止当前的SLAM系统\n  145      // Stop all threads\n  146      SLAM.Shutdown();\n  147  \n  148      // Tracking time statistics\n  149:     // step 6 计算平均耗时\n  150      sort(vTimesTrack.begin(),vTimesTrack.end());\n  151      float totaltime = 0;\n  ...\n  159  \n  160      // Save camera trajectory\n  161:     // step 7 保存TUM格式的相机轨迹\n  162      // 估计是单目时有尺度漂移, 而LGA GBA都只能优化关键帧使尺度漂移最小, 普通帧所产生的轨迹漂移这里无能为力, 我猜作者这样就只\n  163      // 保存了关键帧的位姿,从而避免普通帧带有尺度漂移的位姿对最终误差计算的影响\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/Examples/Monocular/mono_kitti.cc:\n  137  void LoadImages(const string &strPathToSequence, vector<string> &vstrImageFilenames, vector<double> &vTimestamps)\n  138  {\n  139:     // step 1 读取时间戳文件\n  140      ifstream fTimes;\n  141      string strPathTimeFile = strPathToSequence + \"/times.txt\";\n  ...\n  157      }\n  158  \n  159:     // step 1 使用左目图像, 生成左目图像序列中的每一张图像的文件名\n  160      string strPrefixLeft = strPathToSequence + \"/image_0/\";\n  161  \n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/Examples/Stereo/stereo_euroc.cc:\n   46  int main(int argc, char **argv)\n   47  {\n   48:     // step 0 参数检查\n   49      if(argc != 6)\n   50      {\n   ..\n   53      }\n   54  \n   55:     // step 1 获取图像的访问路径\n   56      // Retrieve paths to images\n   57      // 保存左右目图像每张图像路径和时间戳的向量\n   ..\n   76      }\n   77  \n   78:     // step 2 从给出的配置文件中读取去畸变参数\n   79      // Read rectification parameters\n   80      cv::FileStorage fsSettings(\n   ..\n  134      cv::initUndistortRectifyMap(K_r,D_r,R_r,P_r.rowRange(0,3).colRange(0,3),cv::Size(cols_r,rows_r),CV_32F,M1r,M2r);\n  135  \n  136:     // step 3 构造SLAM系统\n  137  \n  138      // 获取图像数目\n  ...\n  152  \n  153      // Main loop\n  154:     // step 4 对每一张输入的图像执行追踪\n  155      cv::Mat imLeft, imRight, imLeftRect, imRightRect;\n  156      for(int ni=0; ni<nImages; ni++)\n  157      {\n  158          // Read left and right images from file\n  159:         // step 4.1 读取原始图像\n  160          imLeft = cv::imread(vstrImageLeft[ni],CV_LOAD_IMAGE_UNCHANGED);\n  161          imRight = cv::imread(vstrImageRight[ni],CV_LOAD_IMAGE_UNCHANGED);\n  ...\n  176          }\n  177  \n  178:         // step 4.2 对左右目图像进行双目矫正和去畸变处理\n  179          //参考博客 [https://blog.csdn.net/sss_369/article/details/52983123]\n  180          // 左目\n  ...\n  190          double tframe = vTimeStamp[ni];\n  191  \n  192:         // step 4.3 开始计时\n  193  \n  194  #ifdef COMPILEDWITHC11\n  ...\n  199  \n  200          // Pass the images to the SLAM system\n  201:         // step 4.5 开始追踪\n  202          SLAM.TrackStereo(imLeftRect,imRightRect,tframe);\n  203  \n  204:         // step 4.6 追踪完成，停止计时，计算追踪时间\n  205  \n  206  #ifdef COMPILEDWITHC11\n  ...\n  215  \n  216          // Wait to load the next frame\n  217:         // step 4.7 等待一段时间以符合下一帧图像的时间戳\n  218          double T=0;\n  219          if(ni<nImages-1)\n  ...\n  226      }\n  227  \n  228:     // step 5 追踪过程执行完毕，退出系统\n  229      // Stop all threads\n  230      SLAM.Shutdown();\n  231  \n  232      // Tracking time statistics\n  233:     // step 6 统计追踪时间\n  234      sort(vTimesTrack.begin(),vTimesTrack.end());\n  235      float totaltime = 0;\n  ...\n  243  \n  244      // Save camera trajectory\n  245:     // step 7 以TUM格式保存轨迹文件（普通帧+ 关键帧）\n  246      SLAM.SaveTrajectoryTUM(\"CameraTrajectory.txt\");\n  247  \n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Frame.cc:\n  124       mpReferenceKF(static_cast<KeyFrame*>(NULL))\n  125  {\n  126:     // Step 1 帧的ID 自增\n  127      mnId=nNextId++;\n  128  \n  129:     // Step 2 计算图像金字塔的参数 \n  130  \t//获取图像金字塔的层数\n  131      mnScaleLevels = mpORBextractorLeft->GetLevels();\n  ...\n  144  \n  145      // ORB extraction\n  146:     // Step 3 对左目右目图像提取ORB特征点, 第一个参数0-左图， 1-右图。为加速计算，同时开了两个线程计算\n  147      thread threadLeft(&Frame::ExtractORB,\t\t//该线程的主函数\n  148  \t\t\t\t\t  this,\t\t\t\t\t\t//当前帧对象的对象指针\n  ...\n  162          return;\n  163  \t\n  164:     // Step 4 用OpenCV的矫正函数、内参对提取到的特征点进行矫正\n  165      // 实际上由于双目输入的图像已经预先经过矫正,所以实际上并没有对特征点进行任何处理操作\n  166      UndistortKeyPoints();\n  167  \n  168:     // Step 5 计算双目间特征点的匹配，只有匹配成功的特征点会计算其深度,深度存放在 mvDepth \n  169  \t// mvuRight中存储的应该是左图像中的点所匹配的在右图像中的点的横坐标（纵坐标相同）\n  170      ComputeStereoMatches();\n  ...\n  224       mTimeStamp(timeStamp), mK(K.clone()),mDistCoef(distCoef.clone()), mbf(bf), mThDepth(thDepth)\n  225  {\n  226:     // Step 1 帧的ID 自增\n  227      mnId=nNextId++;\n  228  \n  229:     // Step 2 计算图像金字塔的参数 \n  230  \t//获取图像金字塔的层数\n  231      mnScaleLevels = mpORBextractorLeft->GetLevels();\n  ...\n  246  \n  247      // ORB extraction\n  248: \t// Step 3 对图像进行提取特征点, 第一个参数0-左图， 1-右图\n  249      ExtractORB(0,imGray);\n  250  \n  ...\n  256          return;\n  257  \n  258: \t// Step 4 用OpenCV的矫正函数、内参对提取到的特征点进行矫正\n  259      UndistortKeyPoints();\n  260  \n  261: \t// Step 5 获取图像的深度，并且根据这个深度推算其右图中匹配的特征点的视差\n  262      ComputeStereoFromRGBD(imDepth);\n  263  \n  ...\n  317  {\n  318      // Frame ID\n  319: \t// Step 1 帧的ID 自增\n  320      mnId=nNextId++;\n  321  \n  322:     // Step 2 计算图像金字塔的参数 \n  323      // Scale Level Info\n  324  \t//获取图像金字塔的层数\n  ...\n  338  \n  339      // ORB extraction\n  340: \t// Step 3 对这个单目图像进行提取特征点, 第一个参数0-左图， 1-右图\n  341      ExtractORB(0,imGray);\n  342  \n  ...\n  348          return;\n  349  \n  350:     // Step 4 用OpenCV的矫正函数、内参对提取到的特征点进行矫正 \n  351      UndistortKeyPoints();\n  352  \n  ...\n  400  void Frame::AssignFeaturesToGrid()\n  401  {\n  402:     // Step 1  给存储特征点的网格数组 Frame::mGrid 预分配空间\n  403  \t// ? 这里0.5 是为什么？节省空间？\n  404      // FRAME_GRID_COLS = 64，FRAME_GRID_ROWS=48\n  ...\n  409              mGrid[i][j].reserve(nReserve);\n  410  \n  411:     // Step 2 遍历每个特征点，将每个特征点在mvKeysUn中的索引值放到对应的网格mGrid中\n  412      for(int i=0;i<N;i++)\n  413      {\n  ...\n  641      vIndices.reserve(N);\n  642  \n  643:     // Step 1 计算半径为r圆左右上下边界所在的网格列和行的id\n  644      // 查找半径为r的圆左侧边界所在网格列坐标。这个地方有点绕，慢慢理解下：\n  645      // (mnMaxX-mnMinX)/FRAME_GRID_COLS：表示列方向每个网格可以平均分得几个像素（肯定大于1）\n  ...\n  675      const bool bCheckLevels = (minLevel>0) || (maxLevel>=0);\n  676  \n  677:     // Step 2 遍历圆形区域内的所有网格，寻找满足条件的候选特征点，并将其index放到输出里\n  678      for(int ix = nMinCellX; ix<=nMaxCellX; ix++)\n  679      {\n  ...\n  769  void Frame::UndistortKeyPoints()\n  770  {\n  771:     // Step 1 如果第一个畸变参数为0，不需要矫正。第一个畸变参数k1是最重要的，一般不为0，为0的话，说明畸变参数都是0\n  772  \t//变量mDistCoef中存储了opencv指定格式的去畸变参数，格式为：(k1,k2,p1,p2,k3)\n  773      if(mDistCoef.at<float>(0)==0.0)\n  ...\n  778  \n  779  \n  780:     // Step 2 如果畸变参数不为0，用OpenCV函数进行畸变矫正\n  781      // Fill matrix with points\n  782      // N为提取的特征点数量，为满足OpenCV函数输入要求，将N个特征点保存在N*2的矩阵中\n  ...\n  806  \n  807      // Fill undistorted keypoint vector\n  808:     // Step 存储校正后的特征点\n  809      mvKeysUn.resize(N);\n  810  \t//遍历每一个特征点\n  ...\n  909      const int Nr = mvKeysRight.size();\n  910  \n  911: \t// Step 1. 行特征点统计. 考虑到尺度金字塔特征，一个特征点可能存在于多行，而非唯一的一行\n  912      for(int iR = 0; iR < Nr; iR++) {\n  913  \n  ...\n  927      }\n  928  \n  929:     // Step 2 -> 3. 粗匹配 + 精匹配\n  930      // 对于立体矫正后的两张图，在列方向(x)存在最大视差maxd和最小视差mind\n  931      // 也即是左图中任何一点p，在右图上的匹配点的范围为应该是[p - maxd, p - mind], 而不需要遍历每一行所有的像素\n  ...\n  965          const cv::Mat &dL = mDescriptors.row(iL);\n  966          \n  967:         // Step2. 粗配准. 左图特征点il与右图中的可能的匹配点进行逐个比较,得到最相似匹配点的相似度和索引\n  968          for(size_t iC=0; iC<vCandidates.size(); iC++) {\n  969  \n  ...\n  994          \n  995          // 如果刚才匹配过程中的最佳描述子距离小于给定的阈值\n  996:         // Step 3. 精确匹配. \n  997          if(bestDist<thOrbDist) {\n  998              // 计算右图特征点x坐标和对应的金字塔尺度\n  ...\n 1067                  continue;\n 1068  \n 1069: \t\t\t// Step 4. 亚像素插值, 使用最佳匹配点及其左右相邻点构成抛物线\n 1070              // 使用3点拟合抛物线的方式，用极小值代替之前计算的最优是差值\n 1071              //    \\                 / <- 由视差为14，15，16的相似度拟合的抛物线\n ....\n 1100                  // 保存最相似点的列坐标(x)信息\n 1101                  // 保存归一化sad最小相似度\n 1102:                 // Step 5. 最优视差值/深度选择.\n 1103                  mvDepth[iL]=mbf/disparity;\n 1104                  mvuRight[iL] = bestuR;\n ....\n 1107      }\n 1108  \n 1109:     // Step 6. 删除离缺点(outliers)\n 1110      // 块匹配相似度阈值判断，归一化sad最小，并不代表就一定是匹配的，比如光照变化、弱纹理、无纹理等同样会造成误匹配\n 1111      // 误匹配判断条件  norm_sad > 1.5 * 1.4 * median\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/FrameDrawer.cc:\n   62  \n   63      //Copy variables within scoped mutex\n   64:     // step 1：将成员变量赋值给局部变量（包括图像、状态、其它的提示）\n   65      //NOTICE 加互斥锁，避免与FrameDrawer::Update函数中图像拷贝发生冲突\n   66      {\n   ..\n   99  \n  100      //Draw\n  101:     // step 2：绘制初始化轨迹连线，绘制特征点边框（特征点用小框圈住）\n  102:     // step 2.1：初始化时，当前帧的特征坐标与初始帧的特征点坐标连成线，形成轨迹\n  103      if(state==Tracking::NOT_INITIALIZED) //INITIALIZING\n  104      {\n  ...\n  136  \n  137                  // This is a match to a MapPoint in the map\n  138:                 // step2.2：正常跟踪时，在画布im中标注特征点\n  139                  if(vbMap[i])\n  140                  {\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Initializer.cc:\n  105      mvbMatched1.resize(mvKeys1.size());\n  106  \n  107:     // Step 1 重新记录特征点对的匹配关系存储在mvMatches12，是否有匹配存储在mvbMatched1\n  108      // 将vMatches12（有冗余） 转化为 mvMatches12（只记录了匹配关系）\n  109      for(size_t i=0, iend=vMatches12.size();i<iend; i++)\n  ...\n  140  \n  141      // Generate sets of 8 points for each RANSAC iteration\n  142:     // Step 2 在所有匹配特征点对中随机选择8对匹配特征点为一组，用于估计H矩阵和F矩阵\n  143      // 共选择 mMaxIterations (默认200) 组\n  144      //mvSets用于保存每次迭代时所使用的向量\n  ...\n  178  \n  179      // Launch threads to compute in parallel a fundamental matrix and a homography\n  180:     // Step 3 计算fundamental 矩阵 和homography 矩阵，为了加速分别开了线程计算 \n  181   \n  182      //这两个变量用于标记在H和F的计算中哪些特征点对被认为是Inlier\n  ...\n  202  \n  203      // Compute ratio of scores\n  204:     // Step 4 计算得分比例来判断选取哪个模型来求位姿R,t\n  205  \t//通过这个规则来判断谁的评分占比更多一些，注意不是简单的比较绝对评分大小，而是看评分的占比\n  206      float RH = SH/(SH+SF);\t\t\t//RH=Ratio of Homography\n  ...\n  247  \n  248      // Normalize coordinates\n  249:     // Step 1 将当前帧和参考帧中的特征点坐标进行归一化，主要是平移和尺度变换\n  250      // 具体来说,就是将mvKeys1和mvKey2归一化到均值为0，一阶绝对矩为1，归一化矩阵分别为T1、T2\n  251      // 这里所谓的一阶绝对矩其实就是随机变量到取值的中心的绝对值的平均值\n  ...\n  286      {\n  287          // Select a minimum set\n  288: \t\t// Step 2 选择8个归一化之后的点对进行迭代\n  289          for(size_t j=0; j<8; j++)\n  290          {\n  ...\n  298          }//读取8对特征点的归一化之后的坐标\n  299  \n  300: \t\t// Step 3 八点法计算单应矩阵\n  301          // 利用生成的8个归一化特征点对, 调用函数 Initializer::ComputeH21() 使用八点法计算单应矩阵  \n  302          // 关于为什么计算之前要对特征点进行归一化，后面又恢复这个矩阵的尺度？\n  ...\n  313          H12i = H21i.inv();\n  314  \n  315:         // Step 4 利用重投影误差为当次RANSAC的结果评分\n  316          currentScore = CheckHomography(H21i, H12i, \t\t\t//输入，单应矩阵的计算结果\n  317  \t\t\t\t\t\t\t\t\t   vbCurrentInliers, \t//输出，特征点对的Inliers标记\n  ...\n  319  \n  320      \n  321:         // Step 5 更新具有最优评分的单应矩阵计算结果,并且保存所对应的特征点对的内点标记\n  322          if(currentScore>score)\n  323          {\n  ...\n  353  \n  354      // Normalize coordinates\n  355:     // Step 1 将当前帧和参考帧中的特征点坐标进行归一化，主要是平移和尺度变换\n  356      // 具体来说,就是将mvKeys1和mvKey2归一化到均值为0，一阶绝对矩为1，归一化矩阵分别为T1、T2\n  357      // 这里所谓的一阶绝对矩其实就是随机变量到取值的中心的绝对值的平均值\n  ...\n  387      {\n  388          // Select a minimum set\n  389:         // Step 2 选择8个归一化之后的点对进行迭代\n  390          for(int j=0; j<8; j++)\n  391          {\n  ...\n  398          }\n  399  \n  400:         // Step 3 八点法计算基础矩阵\n  401          cv::Mat Fn = ComputeF21(vPn1i,vPn2i);\n  402  \n  ...\n  407          F21i = T2t*Fn*T1;\n  408  \n  409:         // Step 4 利用重投影误差为当次RANSAC的结果评分\n  410          currentScore = CheckFundamental(F21i, vbCurrentInliers, mSigma);\n  411  \n  412: \t\t// Step 5 更新具有最优评分的基础矩阵计算结果,并且保存所对应的特征点对的内点标记\n  413          if(currentScore>score)\n  414          {\n  ...\n  666  \n  667      // 遍历N对特征匹配点\n  668:     // Step 2 通过H矩阵，进行参考帧和当前帧之间的双向投影，并计算起加权最小二乘投影误差\n  669      // H21 表示从img1 到 img2的变换矩阵\n  670      // H12 表示从img2 到 img1的变换矩阵 \n  ...\n  682          const float v2 = kp2.pt.y;\n  683  \n  684:         // Step 2.2 计算 img2 到 img1 的重投影误差\n  685          // x2in1 = H12*x2\n  686          // 将图像2中的特征点单应到图像1中\n  ...\n  697          const float chiSquare1 = squareDist1 * invSigmaSquare;\n  698  \n  699:         // Step 2.3 用阈值标记离群点，内点的话累加得分\n  700          if(chiSquare1>th)\n  701              bIn = false;\n  ...\n  725              score += th - chiSquare2;\n  726  \n  727:         // Step 2.4 如果从img2 到 img1 和 从img1 到img2的重投影误差均满足要求，则说明是Inlier point\n  728          if(bIn)\n  729              vbMatchesInliers[i]=true;\n  ...\n  812  \n  813  \n  814:     // Step 2 计算img1 和 img2 在估计 F 时的score值\n  815      for(int i=0; i<N; i++)\n  816      {\n  ...\n  818          bool bIn = true;\n  819  \n  820: \t    // Step 2.1 提取参考帧和当前帧之间的特征匹配点对\n  821          const cv::KeyPoint &kp1 = mvKeys1[mvMatches12[i].first];\n  822          const cv::KeyPoint &kp2 = mvKeys2[mvMatches12[i].second];\n  ...\n  829  \n  830          // Reprojection error in second image\n  831:         // Step 2.2 计算 img1 上的点在 img2 上投影得到的极线 l2 = F21 * p1 = (a2,b2,c2)\n  832  \t\tconst float a2 = f11*u1+f12*v1+f13;\n  833          const float b2 = f21*u1+f22*v1+f23;\n  834          const float c2 = f31*u1+f32*v1+f33;\n  835      \n  836:         // Step 2.3 计算误差 e = (a * p2.x + b * p2.y + c) /  sqrt(a * a + b * b)\n  837          const float num2 = a2*u2+b2*v2+c2;\n  838          const float squareDist1 = num2*num2/(a2*a2+b2*b2);\n  ...\n  840          const float chiSquare1 = squareDist1*invSigmaSquare;\n  841  \t\t\n  842:         // Step 2.4 误差大于阈值就说明这个点是Outlier \n  843          // ? 为什么判断阈值用的 th（1自由度），计算得分用的thScore（2自由度）\n  844          // ? 可能是为了和CheckHomography 得分统一？\n  ...\n  867              score += thScore - chiSquare2;\n  868          \n  869:         // Step 2.5 保存结果\n  870          if(bIn)\n  871              vbMatchesInliers[i]=true;\n  ...\n 1140      vn.reserve(8);\n 1141  \n 1142:     // Step 1.1 讨论 d' > 0 时的 4 组解\n 1143      // 根据论文eq.(12)有\n 1144      // x1 = e1 * sqrt((d1 * d1 - d2 * d2) / (d1 * d1 - d3 * d3))\n ....\n 1235      }\n 1236      \n 1237:     // Step 1.2 讨论 d' < 0 时的 4 组解\n 1238      float aux_sphi = sqrt((d1*d1-d2*d2)*(d2*d2-d3*d3))/((d1-d3)*d2);\n 1239      // cos_theta项\n ....\n 1301      // We reconstruct all hypotheses and check in terms of triangulated points and parallax\n 1302      \n 1303:     // Step 2. 对 8 组解进行验证，并选择产生相机前方最多3D点的解为最优解\n 1304      for(size_t i=0; i<8; i++)\n 1305      {\n ....\n 1464      // 归一化的是这些点在x方向和在y方向上的一阶绝对矩（随机变量的期望）。\n 1465  \n 1466:     // Step 1 计算特征点X,Y坐标的均值 meanX, meanY\n 1467      float meanX = 0;\n 1468      float meanY = 0;\n ....\n 1486      meanY = meanY/N;\n 1487  \n 1488:     // Step 2 计算特征点X,Y坐标离均值的平均偏离程度 meanDevX, meanDevY，注意不是标准差\n 1489      float meanDevX = 0;\n 1490      float meanDevY = 0;\n ....\n 1507      float sY = 1.0/meanDevY;\n 1508  \n 1509:     // Step 3 将x坐标和y坐标分别进行尺度归一化，使得x坐标和y坐标的一阶绝对矩分别为1 \n 1510      // 这里所谓的一阶绝对矩其实就是随机变量到取值的中心的绝对值的平均值（期望）\n 1511      for(int i=0; i<N; i++)\n ....\n 1516      }\n 1517  \n 1518:     // Step 4 计算归一化矩阵：其实就是前面做的操作用矩阵变换来表示而已\n 1519      // |sX  0  -meanx*sX|\n 1520      // |0   sY -meany*sY|\n ....\n 1566  \n 1567      // Camera 1 Projection Matrix K[I|0]\n 1568:     // Step 1：计算相机的投影矩阵  \n 1569      // 投影矩阵P是一个 3x4 的矩阵，可以将空间中的一个点投影到平面上，获得其平面坐标，这里均指的是齐次坐标。\n 1570      // 对于第一个相机是 P1=K*[I|0]\n ....\n 1600              continue;\n 1601  \n 1602:         // Step 2 获取特征点对，调用Triangulate() 函数进行三角化，得到三角化测量之后的3D点坐标\n 1603          // kp1和kp2是匹配好的有效特征点\n 1604          const cv::KeyPoint &kp1 = vKeys1[vMatches12[i].first];\n ....\n 1612  \t\t\t\t\tp3dC1);\t\t//输出，三角化测量之后特征点的空间坐标\t\t\n 1613  \n 1614: \t\t// Step 3 第一关：检查三角化的三维点坐标是否合法（非无穷值）\n 1615          // 只要三角测量的结果中有一个是无穷大的就说明三角化失败，跳过对当前点的处理，进行下一对特征点的遍历 \n 1616          if(!isfinite(p3dC1.at<float>(0)) || !isfinite(p3dC1.at<float>(1)) || !isfinite(p3dC1.at<float>(2)))\n ....\n 1623  \n 1624          // Check parallax\n 1625:         // Step 4 第二关：通过三维点深度值正负、两相机光心视差角大小来检查是否合法 \n 1626  \n 1627          //得到向量PO1\n ....\n 1653              continue;\n 1654  \n 1655:         // Step 5 第三关：计算空间点在参考帧和当前帧上的重投影误差，如果大于阈值则舍弃\n 1656          // Check reprojection error in first image\n 1657          // 计算3D点在第一个图像上的投影误差\n ....\n 1686              continue;\n 1687  \n 1688:         // Step 6 统计经过检验的3D点个数，记录3D点视差角 \n 1689          // 如果运行到这里就说明当前遍历的这个特征点对靠谱，经过了重重检验，说明是一个合格的点，称之为good点 \n 1690          vCosParallax.push_back(cosParallax);\n ....\n 1700      }\n 1701  \n 1702:     // Step 7 得到3D点中较大的视差角，并且转换成为角度制表示\n 1703      if(nGood>0)\n 1704      {\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/LocalMapping.cc:\n  198  void LocalMapping::ProcessNewKeyFrame()\n  199  {\n  200:     // Step 1：从缓冲队列中取出一帧关键帧 (这个函数设计的也是一次只能够处理一个关键帧)\n  201      // Tracking线程向LocalMapping中插入关键帧存在该队列中\n  202      {\n  ...\n  209  \n  210      // Compute Bags of Words structures\n  211:     // Step 2：计算该关键帧特征点的Bow映射关系\n  212      // 得到该关键帧对应的词袋向量\n  213      // 节点的特征向量和特征索引\n  ...\n  216  \n  217      // Associate MapPoints to the new keyframe and update normal and descriptor\n  218:     // Step 3：跟踪局部地图过程中新匹配上的MapPoints和当前关键帧绑定\n  219      // 在TrackLocalMap函数中将局部地图中的MapPoints与当前帧进行了匹配，\n  220      // 但没有对这些匹配上的MapPoints与当前帧进行关联\n  ...\n  255  \n  256      // Update links in the Covisibility Graph\n  257:     // Step 4：更新关键帧间的连接关系，Covisibility图和Essential图(tree)\n  258      mpCurrentKeyFrame->UpdateConnections();\n  259  \n  260      // Insert Keyframe in Map\n  261:     // Step 5：将该关键帧插入到地图中\n  262      mpMap->AddKeyFrame(mpCurrentKeyFrame);\n  263  }\n  ...\n  284          if(pMP->isBad())\n  285          {\n  286:             // Step 1：已经是坏点的MapPoints直接从检查链表中删除\n  287              lit = mlpRecentAddedMapPoints.erase(lit);\n  288          }\n  289          else if(pMP->GetFoundRatio()<0.25f)\n  290          {\n  291:             // Step 2：将不满足VI-B条件的MapPoint剔除\n  292              // VI-B 条件1：\n  293              // 跟踪到该MapPoint的Frame数相比预计可观测到该MapPoint的Frame数的比例需大于25%\n  ...\n  298          else if(((int)nCurrentKFid-(int)pMP->mnFirstKFid)>=2 && pMP->Observations()<=cnThObs)\n  299          {\n  300:             // Step 3：将不满足VI-B条件的MapPoint剔除\n  301              // VI-B 条件2：从该点建立开始，到现在已经过了不小于2个关键帧\n  302              // 但是观测到该点的关键帧数却不超过cnThObs帧，那么该点检验不合格\n  ...\n  305          }\n  306          else if(((int)nCurrentKFid-(int)pMP->mnFirstKFid)>=3)\n  307:             // Step 4：从建立该点开始，已经过了3个关键帧而没有被剔除，则认为是质量高的点\n  308              // 因此没有SetBadFlag()，仅从队列中删除，放弃继续对该MapPoint的检测\n  309              lit = mlpRecentAddedMapPoints.erase(lit);\n  ...\n  323          nn=20;\n  324  \n  325:     // Step 1：在当前关键帧的共视关键帧中找到共视程度最高的nn帧相邻帧vpNeighKFs\n  326      const vector<KeyFrame*> vpNeighKFs = mpCurrentKeyFrame->GetBestCovisibilityKeyFrames(nn);\n  327  \n  ...\n  354  \n  355      // Search matches with epipolar restriction and triangulate\n  356:     // Step 2：遍历相邻关键帧vpNeighKFs\n  357      for(size_t i=0; i<vpNeighKFs.size(); i++)\n  358      {\n  ...\n  372          const float baseline = cv::norm(vBaseline);\n  373  \n  374:         // Step 3：判断相机运动的基线是不是足够长\n  375          if(!mbMonocular)\n  376          {\n  ...\n  393  \n  394          // Compute Fundamental Matrix\n  395:         // Step 4：根据两个关键帧的位姿计算它们之间的基本矩阵\n  396          cv::Mat F12 = ComputeF12(mpCurrentKeyFrame,pKF2);\n  397  \n  398          // Search matches that fullfil epipolar constraint\n  399:         // Step 5：通过极线约束限制匹配时的搜索范围，进行特征点匹配\n  400          vector<pair<size_t,size_t> > vMatchedIndices;\n  401          matcher.SearchForTriangulation(mpCurrentKeyFrame,pKF2,F12,vMatchedIndices,false);\n  ...\n  416  \n  417          // Triangulate each match\n  418:         // Step 6：对每对匹配通过三角化生成3D点,和 Triangulate函数差不多\n  419          const int nmatches = vMatchedIndices.size();\n  420          for(int ikp=0; ikp<nmatches; ikp++)\n  421          {\n  422:             // step 6.1：取出匹配特征点\n  423  \n  424              // 当前匹配对在当前关键帧中的索引\n  ...\n  441  \n  442              // Check parallax between rays\n  443:             // step 6.2：利用匹配点反投影得到视差角\n  444              // 特征点反投影,其实得到的是在各自相机坐标系下的一个非归一化的方向向量,和这个点的反投影射线重合\n  445              cv::Mat xn1 = (cv::Mat_<float>(3,1) << (kp1.pt.x-cx1)*invfx1, (kp1.pt.y-cy1)*invfy1, 1.0);\n  ...\n  457              float cosParallaxStereo2 = cosParallaxStereo;\n  458  \n  459:             // step 6.3：对于双目，利用双目得到视差角\n  460              if(bStereo1)//传感器是双目相机,并且当前的关键帧的这个点有对应的深度\n  461                  // 其实就是利用双目成像的原理,计算出双目相机两个相机观察这个点的时候的视差角;画个图就一目了然了\n  ...\n  471              cosParallaxStereo = min(cosParallaxStereo1,cosParallaxStereo2);\n  472  \n  473:             // step 6.4：三角化恢复3D点\n  474              cv::Mat x3D;\n  475              // cosParallaxRays>0 && (bStereo1 || bStereo2 || cosParallaxRays<0.9998)表明视差角正常\n  ...\n  511  \n  512              //Check triangulation in front of cameras\n  513:             // step 6.5：检测生成的3D点是否在相机前方,不在的话就放弃这个点\n  514              float z1 = Rcw1.row(2).dot(x3Dt)+tcw1.at<float>(2);\n  515              if(z1<=0)\n  ...\n  521  \n  522              //Check reprojection error in first keyframe\n  523:             // step 6.6：计算3D点在当前关键帧下的重投影误差\n  524              const float &sigmaSquare1 = mpCurrentKeyFrame->mvLevelSigma2[kp1.octave];\n  525              const float x1 = Rcw1.row(0).dot(x3Dt)+tcw1.at<float>(0);\n  ...\n  579  \n  580              //Check scale consistency\n  581:             // step 6.7：检查尺度连续性\n  582  \n  583              // 世界坐标系下，3D点与相机间的向量，方向由相机指向3D点\n  ...\n  605  \n  606              // Triangulation is succesfull\n  607:             // step 6.8：三角化生成3D点成功，构造成MapPoint\n  608              MapPoint* pMP = new MapPoint(x3D,mpCurrentKeyFrame,mpMap);\n  609  \n  610:             // step 6.9：为该MapPoint添加属性：\n  611              // a.观测到该MapPoint的关键帧\n  612              // b.该MapPoint的描述子\n  ...\n  624              mpMap->AddMapPoint(pMP);\n  625  \n  626:             // step 6.10：将新产生的点放入检测队列\n  627              // 这些MapPoints都会经过MapPointCulling函数的检验\n  628              mlpRecentAddedMapPoints.push_back(pMP);\n  ...\n  637  {\n  638      // Retrieve neighbor keyframes\n  639:     // STEP 1：获得当前关键帧在covisibility图中权重排名前nn的邻接关键帧\n  640      // 找到当前帧一级相邻与二级相邻关键帧\n  641  \n  ...\n  676      ORBmatcher matcher;\n  677  \n  678:     // STEP 2：将当前帧的MapPoints分别与一级二级相邻帧(的MapPoints)进行融合 -- 正向\n  679      vector<MapPoint*> vpMapPointMatches = mpCurrentKeyFrame->GetMapPointMatches();\n  680      for(vector<KeyFrame*>::iterator vit=vpTargetKFs.begin(), vend=vpTargetKFs.end(); vit!=vend; vit++)\n  ...\n  694      vpFuseCandidates.reserve(vpTargetKFs.size()*vpMapPointMatches.size());\n  695  \n  696:     // STEP 3：将一级二级相邻帧的MapPoints分别与当前帧（的MapPoints）进行融合 -- 反向\n  697      // 遍历每一个一级邻接和二级邻接关键帧\n  698      for(vector<KeyFrame*>::iterator vitKF=vpTargetKFs.begin(), vendKF=vpTargetKFs.end(); vitKF!=vendKF; vitKF++)\n  ...\n  722  \n  723      // Update points\n  724:     // STEP4：更新当前帧MapPoints的描述子，深度，观测主方向等属性\n  725      vpMapPointMatches = mpCurrentKeyFrame->GetMapPointMatches();\n  726      for(size_t i=0, iend=vpMapPointMatches.size(); i<iend; i++)\n  ...\n  742      // Update connections in covisibility graph\n  743  \n  744:     // STEP5：更新当前帧的MapPoints后更新与其它帧的连接关系\n  745      // 更新covisibility图\n  746      mpCurrentKeyFrame->UpdateConnections();\n  ...\n  886      // We only consider close stereo points\n  887  \n  888:     // STEP1：根据Covisibility Graph提取当前帧的共视关键帧 (所有)\n  889      vector<KeyFrame*> vpLocalKeyFrames = mpCurrentKeyFrame->GetVectorCovisibleKeyFrames();\n  890  \n  ...\n  895          if(pKF->mnId==0)\n  896              continue;\n  897:         // STEP2：提取每个共视关键帧的MapPoints\n  898          const vector<MapPoint*> vpMapPoints = pKF->GetMapPointMatches();\n  899  \n  ...\n  905          int nMPs=0;                         // 计数器,参与到检测的地图点的总数目\n  906  \n  907:         // STEP3：遍历该局部关键帧的MapPoints，判断是否90%以上的MapPoints能被其它关键帧（至少3个）观测到\n  908          for(size_t i=0, iend=vpMapPoints.size(); i<iend; i++)\n  909          {\n  ...\n  957          }\n  958  \n  959:         // STEP4：该局部关键帧90%以上的MapPoints能被其它关键帧（至少3个）观测到，则认为是冗余关键帧\n  960          if(nRedundantObservations>0.9*nMPs)\n  961              // 剔除的时候就设置一个 bad flag 就可以了\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/LoopClosing.cc:\n  144  \n  145      //If the map contains less than 10 KF or less than 10 KF have passed from last loop detection\n  146:     // STEP 1：如果距离上次闭环没多久（小于10帧），或者map中关键帧总共还没有10帧，则不进行闭环检测\n  147      // 后者的体现是当mLastLoopKFid为0的时候\n  148      if(mpCurrentKF->mnId<mLastLoopKFid+10)\n  ...\n  157      // We will impose loop candidates to have a higher similarity than this\n  158      // VIII-A\n  159:     // STEP 2：遍历所有共视关键帧，计算当前关键帧与每个共视关键的bow相似度得分，并得到最低得分minScore\n  160      const vector<KeyFrame*> vpConnectedKeyFrames = mpCurrentKF->GetVectorCovisibleKeyFrames();\n  161      const DBoW2::BowVector &CurrentBowVec = mpCurrentKF->mBowVec;\n  ...\n  175  \n  176      // Query the database imposing the minimum score\n  177:     // STEP 3：在所有关键帧中找出闭环备选帧\n  178      // 说白了就是认为和当前关键帧具有回环关系的关键帧,不应该低于当前关键帧的相邻关键帧的最低的相似度\n  179      // 得到的这些关键帧,和当前关键帧具有较多的共视单词,并且相似度评分都挺高\n  ...\n  195      // A group is consistent with a previous group if they share at least a keyframe\n  196      // We must detect a consistent loop in several consecutive keyframes to accept it\n  197:     // STEP 4：在候选帧中检测具有连续性的候选帧\n  198      // 1、每个候选帧将与自己相连的关键帧构成一个“子候选组spCandidateGroup”， vpCandidateKFs-->spCandidateGroup\n  199      // 2、检测“子候选组”中每一个关键帧是否存在于“连续组”，如果存在 nCurrentConsistency++，则将该“子候选组”放入“当前连续组vCurrentConsistentGroups”\n  ...\n  338      // output:\n  339  \n  340:     // Step 0. 准备工作\n  341      // For each consistent loop candidate we try to compute a Sim3\n  342      const int nInitialCandidates = mvpEnoughConsistentCandidates.size();\n  ...\n  361      int nCandidates=0;\n  362  \n  363:     // Step 1. 遍历闭环候选帧集，筛选出与当前帧的匹配特征点数大于20的候选帧集合，并为每一个候选帧构造一个Sim3Solver\n  364      for(int i=0; i<nInitialCandidates; i++)\n  365      {\n  366:         // Step 1.1 从筛选的闭环候选帧中取出一帧关键帧pKF\n  367          KeyFrame* pKF = mvpEnoughConsistentCandidates[i];\n  368  \n  ...\n  377          }\n  378  \n  379:         // Step 1.2 将当前帧 mpCurrentKF 与闭环候选关键帧pKF匹配\n  380          // 通过bow加速得到 mpCurrentKF 与 pKF 之间的匹配特征点\n  381          // vvpMapPointMatches 是匹配特征点对应的 MapPoints,本质上来自于候选闭环帧\n  ...\n  390          else\n  391          {\n  392:             // Step 1.3 为保留的候选帧构造Sim3求解器\n  393              // 如果 mbFixScale 为 true，则是6DoFf优化（双目 RGBD）\n  394              // 如果是false，则是7DoF优化（单目）\n  ...\n  407      bool bMatch = false;\n  408  \n  409:     // Step 2.0 对每一个候选帧进行 RANSAC 迭代匹配，直到有一个候选帧匹配成功，或者全部失败\n  410      while(nCandidates>0 && !bMatch)\n  411      {\n  ...\n  428              bool bNoMore;\n  429  \n  430:             // Step 2.1 取出从 Step 1.3 中为当前候选帧构建的 Sim3Solver 并开始迭代\n  431              Sim3Solver* pSolver = vpSim3Solvers[i];\n  432  \n  ...\n  454                  }\n  455  \n  456:                 // Step 2.2 通过步骤2.1求取的Sim3变换引导关键帧匹配弥补步骤1中的漏匹配\n  457                  // 候选帧pKF到当前帧mpCurrentKF的R（R12），t（t12），变换尺度s（s12）\n  458                  cv::Mat R = pSolver->GetEstimatedRotation();\n  ...\n  465                  matcher.SearchBySim3(mpCurrentKF,pKF,vpMapPointMatches,s,R,t,7.5);\n  466  \n  467:                 // Step 2.3 Sim3优化，只要有一个候选帧通过Sim3的求解与优化，就跳出停止对其它候选帧的判断\n  468                  // OpenCV的Mat矩阵转成Eigen的Matrix类型\n  469                  g2o::Sim3 gScm(Converter::toMatrix3d(R),Converter::toVector3d(t),s);\n  ...\n  509      }\n  510  \n  511:     // Step 3.0：取出闭环匹配上关键帧的相连关键帧，得到它们的MapPoints放入 mvpLoopMapPoints\n  512      // 注意是匹配上的那个关键帧：mpMatchedKF\n  513      // 将mpMatchedKF相连的关键帧全部取出来放入 vpLoopConnectedKFs\n  ...\n  543  \n  544      // Find more matches projecting with the computed Sim3\n  545:     // Step 4.0：将闭环匹配上关键帧以及相连关键帧的MapPoints投影到当前关键帧进行投影匹配\n  546      // 根据投影查找更多的匹配（成功的闭环匹配需要满足足够多的匹配特征点数）\n  547      // 根据Sim3变换，将每个mvpLoopMapPoints投影到mpCurrentKF上，并根据尺度确定一个搜索区域，\n  ...\n  552  \n  553      // If enough matches accept Loop\n  554:     // Step 5.0 判断当前帧与检测出的所有闭环关键帧是否有足够多的MapPoints匹配\n  555      int nTotalMatches = 0;\n  556      for(size_t i=0; i<mvpCurrentMatchedPoints.size(); i++)\n  ...\n  560      }\n  561  \n  562:     // Step 6.0 清空mvpEnoughConsistentCandidates\n  563      if(nTotalMatches>=40)\n  564      {\n  ...\n  591  \n  592      cout << \"Loop detected!\" << endl;\n  593:     // STEP 0：请求局部地图停止，防止在回环矫正时局部地图线程中InsertKeyFrame函数插入新的关键帧\n  594:     // STEP 1：根据共视关系更新当前帧与其它关键帧之间的连接\n  595:     // STEP 2：通过位姿传播，得到Sim3优化后，与当前帧相连的关键帧的位姿，以及它们的MapPoints\n  596:     // STEP 3：检查当前帧的MapPoints与闭环匹配帧的MapPoints是否存在冲突，对冲突的MapPoints进行替换或填补\n  597:     // STEP 4：通过将闭环时相连关键帧的mvpLoopMapPoints投影到这些关键帧中，进行MapPoints检查与替换\n  598:     // STEP 5：更新当前关键帧之间的共视相连关系，得到因闭环时MapPoints融合而新得到的连接关系\n  599:     // STEP 6：进行EssentialGraph优化，LoopConnections是形成闭环后新生成的连接关系，不包括步骤7中当前帧与闭环匹配帧之间的连接关系\n  600:     // STEP 7：添加当前帧与闭环匹配帧之间的边（这个连接关系不优化）\n  601:     // STEP 8：新建一个线程用于全局BA优化\n  602  \n  603      // Send a stop signal to Local Mapping\n  604      // Avoid new keyframes are inserted while correcting the loop\n  605:     // STEP 0：请求局部地图停止，防止在回环矫正时局部地图线程中InsertKeyFrame函数插入新的关键帧\n  606      mpLocalMapper->RequestStop();\n  607  \n  ...\n  631  \n  632      // Ensure current keyframe is updated\n  633:     // STEP 1：根据共视关系更新当前帧与其它关键帧之间的连接\n  634      // 猜测这里还要更新的原因应该是,当前处理的这个关键帧应该不是当前时刻最新插入的关键帧,它可能和后面新来的一些关键帧也产生了共视关系,虽然\n  635      // 在那些关键帧中也在这个中添加了更新的操作但是,有些图(本征图?)没法被他们更新吧,还是得这个关键帧自己来\n  ...\n  637  \n  638      // Retrive keyframes connected to the current keyframe and compute corrected Sim3 pose by propagation\n  639:     // STEP 2：通过位姿传播，得到Sim3优化后，与当前帧相连的关键帧的位姿，以及它们的MapPoints\n  640      // 当前帧与世界坐标系之间的Sim变换在ComputeSim3函数中已经确定并优化，\n  641      // 通过相对位姿关系，可以确定这些相连的关键帧与世界坐标系之间的Sim3变换\n  ...\n  655          unique_lock<mutex> lock(mpMap->mMutexMapUpdate);\n  656  \n  657:         // STEP 2.1：通过位姿传播，得到Sim3调整后其它与当前帧相连关键帧的位姿（只是得到，还没有修正）\n  658          // 遍历\"当前关键帧组\"\"\n  659          for(vector<KeyFrame*>::iterator vit=mvpCurrentConnectedKFs.begin(), vend=mvpCurrentConnectedKFs.end(); vit!=vend; vit++)\n  ...\n  686  \n  687          // Correct all MapPoints obsrved by current keyframe and neighbors, so that they align with the other side of the loop\n  688:         // STEP 2.2：得到调整相连帧位姿后，修正这些关键帧的MapPoints\n  689          // 遍历当前关键帧组中的每一个关键帧\n  690          for(KeyFrameAndPose::iterator mit=CorrectedSim3.begin(), mend=CorrectedSim3.end(); mit!=mend; mit++)\n  ...\n  724  \n  725              // Update keyframe pose with corrected Sim3. First transform Sim3 to SE3 (scale translation)\n  726:             // STEP 2.3：将Sim3转换为SE3，根据更新的Sim3，更新关键帧的位姿\n  727              // 其实是现在已经有了更新后的关键帧组中关键帧的位姿,但是在上面的操作时只是暂时存储到了 KeyFrameAndPose 类型的变量中,还没有写回到关键帧对象中\n  728              Eigen::Matrix3d eigR = g2oCorrectedSiw.rotation().toRotationMatrix();  //调用toRotationMatrix来去除尺度信息的\n  ...\n  737  \n  738              // Make sure connections are updated\n  739:             // STEP 2.4：根据共视关系更新当前帧与其它关键帧之间的连接\n  740              // 地图点的位置改变了,可能会引起共视关系\\权值的改变 \n  741              pKFi->UpdateConnections();\n  ...\n  744          // Start Loop Fusion\n  745          // Update matched map points and replace if duplicated\n  746:         // STEP 3：检查当前帧的MapPoints与闭环匹配帧的MapPoints是否存在冲突，对冲突的MapPoints进行替换或填补\n  747          // mvpCurrentMatchedPoints 是刚才当前关键帧和闭环关键帧组的所有地图点进行投影得到的匹配点\n  748          for(size_t i=0; i<mvpCurrentMatchedPoints.size(); i++)\n  ...\n  771      // into the current keyframe and neighbors using corrected poses.\n  772      // Fuse duplications.\n  773:     // STEP 4：通过将闭环时相连关键帧的mvpLoopMapPoints投影到这些关键帧中，进行MapPoints检查与替换\n  774      // 当前线程中的函数\n  775      SearchAndFuse(CorrectedSim3);\n  ...\n  777  \n  778      // After the MapPoint fusion, new links in the covisibility graph will appear attaching both sides of the loop\n  779:     // STEP 5：更新当前关键帧之间的共视相连关系，得到因闭环时MapPoints融合而新得到的连接关系\n  780      // 这个变量中将会存储那些因为闭环关系的形成,而新形成的链接关系\n  781      map<KeyFrame*, set<KeyFrame*> > LoopConnections;\n  782  \n  783:     // STEP 5.1：遍历当前帧相连关键帧（一级相连）\n  784      for(vector<KeyFrame*>::iterator vit=mvpCurrentConnectedKFs.begin(), vend=mvpCurrentConnectedKFs.end(); vit!=vend; vit++)\n  785      {\n  786          KeyFrame* pKFi = *vit;\n  787:         // STEP 5.2：得到与当前帧相连关键帧的相连关键帧（二级相连）\n  788          vector<KeyFrame*> vpPreviousNeighbors = pKFi->GetVectorCovisibleKeyFrames();\n  789  \n  790          // Update connections. Detect new links.\n  791:         // STEP 5.3：更新一级相连关键帧的连接关系(会把当前关键帧添加进去,因为地图点已经更新和替换了)\n  792          pKFi->UpdateConnections();\n  793:         // STEP 5.4：取出该帧更新后的连接关系\n  794          LoopConnections[pKFi]=pKFi->GetConnectedKeyFrames();\n  795:         // STEP 5.5：从连接关系中去除闭环之前的二级连接关系，剩下的连接就是由闭环得到的连接关系\n  796          for(vector<KeyFrame*>::iterator vit_prev=vpPreviousNeighbors.begin(), vend_prev=vpPreviousNeighbors.end(); vit_prev!=vend_prev; vit_prev++)\n  797          {\n  798              LoopConnections[pKFi].erase(*vit_prev);\n  799          }\n  800:         // STEP 5.6：从连接关系中去除闭环之前的一级连接关系，剩下的连接就是由闭环得到的连接关系\n  801          for(vector<KeyFrame*>::iterator vit2=mvpCurrentConnectedKFs.begin(), vend2=mvpCurrentConnectedKFs.end(); vit2!=vend2; vit2++)\n  802          {\n  ...\n  806  \n  807      // Optimize graph\n  808:     // STEP 6：进行EssentialGraph优化，LoopConnections是形成闭环后新生成的连接关系，不包括步骤7中当前帧与闭环匹配帧之间的连接关系\n  809      Optimizer::OptimizeEssentialGraph(mpMap, mpMatchedKF, mpCurrentKF, NonCorrectedSim3, CorrectedSim3, LoopConnections, mbFixScale);\n  810  \n  811      // Add loop edge\n  812:     // STEP 7：添加当前帧与闭环匹配帧之间的边（这个连接关系不优化）\n  813      // FIXME:这两句话应该放在OptimizeEssentialGraph之前，因为OptimizeEssentialGraph的步骤4.2中有优化\n  814      mpMatchedKF->AddLoopEdge(mpCurrentKF);\n  ...\n  816  \n  817      // Launch a new thread to perform Global Bundle Adjustment\n  818:     // STEP 8：新建一个线程用于全局BA优化\n  819      // OptimizeEssentialGraph只是优化了一些主要关键帧的位姿，这里进行全局BA可以全局优化所有位姿和MapPoints\n  820      mbRunningGBA = true;\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/MapDrawer.cc:\n  111      const float z = w*0.6;\n  112  \n  113:     // step 1：取出所有的关键帧\n  114      const vector<KeyFrame*> vpKFs = mpMap->GetAllKeyFrames();\n  115  \n  116:     // step 2：显示所有关键帧图标\n  117      //通过显示界面选择是否显示历史关键帧图标\n  118      if(bDrawKF)\n  ...\n  163      }\n  164  \n  165:     // step 3：显示所有关键帧的Essential Graph (本征图)\n  166      /**\n  167       * 共视图中存储了所有关键帧的共视关系\n  ...\n  182          {\n  183              // Covisibility Graph (共视图)\n  184:             // step 3.1 共视程度比较高的共视关键帧用线连接\n  185              //遍历每一个关键帧，得到它们共视程度比较高的关键帧\n  186              const vector<KeyFrame*> vCovKFs = vpKFs[i]->GetCovisiblesByWeight(100);\n  ...\n  201  \n  202              // Spanning tree\n  203:             // step 3.2 连接最小生成树 (PS: 我觉得这里并不是权值最小,而是其中的边对于其他的图来讲是最少的)\n  204              //TODO 这个部分的理论知识还不是很了解\n  205              KeyFrame* pParent = vpKFs[i]->GetParent();\n  ...\n  212  \n  213              // Loops\n  214:             // step 3.3 连接闭环时形成的连接关系\n  215              //TODO 这个部分也不是非常明白\n  216              set<KeyFrame*> sLoopKFs = vpKFs[i]->GetLoopEdges();\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Optimizer.cc:\n   91      vbNotIncludedMP.resize(vpMP.size());\n   92  \n   93:     // step 1 初始化g2o优化器\n   94      g2o::SparseOptimizer optimizer;\n   95      // ? 雅克比是6x3的?\n   ..\n  113      long unsigned int maxKFid = 0;\n  114  \n  115:     // step 2 向优化器添加顶点\n  116  \n  117      // Set KeyFrame vertices\n  118:     // step 2.1 ：向优化器添加关键帧位姿顶点\n  119      // 对于当前地图中的所有关键帧\n  120      for(size_t i=0; i<vpKFs.size(); i++)\n  ...\n  143  \n  144      // Set MapPoint vertices\n  145:     // step 2.2：向优化器添加MapPoints顶点\n  146      // 遍历地图中的所有地图点\n  147      for(size_t i=0; i<vpMP.size(); i++)\n  ...\n  169          int nEdges = 0;\n  170          //SET EDGES\n  171:         // step 3：向优化器添加投影边（是在遍历地图点、添加地图点的顶点的时候顺便添加的）\n  172          // 遍历观察到当前地图点的所有关键帧\n  173          for(map<KeyFrame*,size_t>::const_iterator mit=observations.begin(); mit!=observations.end(); mit++)\n  ...\n  276  \n  277      // Optimize!\n  278:     // step 4：开始优化\n  279      optimizer.initializeOptimization();\n  280      optimizer.optimize(nIterations);\n  281  \n  282      // Recover optimized data\n  283:     // step 5：得到优化的结果\n  284  \n  285:     // step 5.1 Keyframes\n  286      // 遍历所有的关键帧(因为只要是关键帧没有不是bad的话,就一定会参与到GBA的过程中)\n  287      for(size_t i=0; i<vpKFs.size(); i++)\n  ...\n  309      }\n  310  \n  311:     // step 5.2 Points\n  312      // 遍历所有地图点,去除其中没有参与优化过程的地图点\n  313      for(size_t i=0; i<vpMP.size(); i++)\n  ...\n  365      // 该优化函数主要用于Tracking线程中：运动跟踪、参考帧跟踪、地图跟踪、重定位\n  366  \n  367:     // step 1：构造g2o优化器\n  368      g2o::SparseOptimizer optimizer;\n  369      g2o::BlockSolver_6_3::LinearSolverType * linearSolver;\n  ...\n  380  \n  381      // Set Frame vertex\n  382:     // step 2：添加顶点：待优化当前帧的Tcw\n  383      g2o::VertexSE3Expmap * vSE3 = new g2o::VertexSE3Expmap();\n  384      vSE3->setEstimate(Converter::toSE3Quat(pFrame->mTcw));\n  ...\n  406      const float deltaStereo = sqrt(7.815);      // 三个平方项(\\delta x^2 \\delta y^2 \\delta rx^2),自由度为3\n  407  \n  408:     // step 3：添加一元边：相机投影模型\n  409      {\n  410      // 由于需要使用地图点来构造顶点和边,因此不希望在构造的过程中部分地图点被改写造成不一致甚至是段错误,so,这里进入临界区\n  ...\n  509      // We perform 4 optimizations, after each optimization we classify observation as inlier/outlier\n  510      // At the next optimization, outliers are not included, but at the end they can be classified as inliers again.\n  511:     // step 4：开始优化，总共优化四次，每次优化迭代10次,每次优化后，将观测分为outlier和inlier，outlier不参与下次优化\n  512      // 由于每次优化后是对所有的观测进行outlier和inlier判别，因此之前被判别为outlier有可能变成inlier，反之亦然\n  513      // 基于卡方检验计算出的阈值（假设测量有一个像素的偏差）\n  ...\n  639      list<KeyFrame*> lLocalKeyFrames;\n  640  \n  641:     // step 1：将当前关键帧加入lLocalKeyFrames\n  642      lLocalKeyFrames.push_back(pKF);\n  643      pKF->mnBALocalForKF = pKF->mnId;\n  644  \n  645:     // step 2：找到关键帧连接的关键帧（一级相连），加入lLocalKeyFrames中\n  646      const vector<KeyFrame*> vNeighKFs = pKF->GetVectorCovisibleKeyFrames();\n  647      for(int i=0, iend=vNeighKFs.size(); i<iend; i++)\n  ...\n  654  \n  655      // Local MapPoints seen in Local KeyFrames\n  656:     // step 3：遍历 lLocalKeyFrames 中关键帧，将它们观测的MapPoints加入到lLocalMapPoints\n  657      list<MapPoint*> lLocalMapPoints;\n  658      // 遍历 lLocalKeyFrames 中的每一个关键帧\n  ...\n  677  \n  678      // Fixed Keyframes. Keyframes that see Local MapPoints but that are not Local Keyframes\n  679:     // step 4：得到能被局部MapPoints观测到，但不属于局部关键帧的关键帧，这些关键帧在局部BA优化时不优化\n  680      list<KeyFrame*> lFixedCameras;\n  681      // 遍历局部地图中的每个地图点\n  ...\n  700  \n  701      // Setup optimizer\n  702:     // step 5：构造g2o优化器\n  703      g2o::SparseOptimizer optimizer;\n  704      g2o::BlockSolver_6_3::LinearSolverType * linearSolver;\n  ...\n  718  \n  719      // Set Local KeyFrame vertices\n  720:     // step 6：添加顶点：Pose of Local KeyFrame\n  721      for(list<KeyFrame*>::iterator lit=lLocalKeyFrames.begin(), lend=lLocalKeyFrames.end(); lit!=lend; lit++)\n  722      {\n  ...\n  732  \n  733      // Set Fixed KeyFrame vertices\n  734:     // step  7：添加顶点：Pose of Fixed KeyFrame，注意这里调用了vSE3->setFixed(true)。\n  735      for(list<KeyFrame*>::iterator lit=lFixedCameras.begin(), lend=lFixedCameras.end(); lit!=lend; lit++)\n  736      {\n  ...\n  746  \n  747      // Set MapPoint vertices\n  748:     // step  7：添加3D顶点\n  749      const int nExpectedSize = (lLocalKeyFrames.size()+lFixedCameras.size())*lLocalMapPoints.size();\n  750  \n  ...\n  785  \n  786          // Set edges\n  787:         // step 8：在添加完了一个地图点之后, 对每一对关联的MapPoint和KeyFrame构建边\n  788          // 遍历所有观测到当前地图点的关键帧\n  789          for(map<KeyFrame*,size_t>::const_iterator mit=observations.begin(), mend=observations.end(); mit!=mend; mit++)\n  ...\n  865              return;\n  866  \n  867:     // step 9：开始优化 -- 第一阶段优化\n  868      optimizer.initializeOptimization();\n  869      optimizer.optimize(5);\n  ...\n  881  \n  882      // Check inlier observations\n  883:     // step 10：检测outlier，并设置下次不优化\n  884      // 遍历所有的单目误差边\n  885      for(size_t i=0, iend=vpEdgesMono.size(); i<iend;i++)\n  ...\n  918  \n  919      // Optimize again without the outliers\n  920:     // step 11：排除误差较大的outlier后再次优化 -- 第二阶段优化\n  921      optimizer.initializeOptimization(0);\n  922      optimizer.optimize(10);\n  ...\n  928  \n  929      // Check inlier observations\n  930:     // step 12：在优化后重新计算误差，剔除连接误差比较大的关键帧和MapPoint\n  931      // 对于单目误差边\n  932      for(size_t i=0, iend=vpEdgesMono.size(); i<iend;i++)\n  ...\n  981  \n  982      // Recover optimized data\n  983:     // step 13：优化后更新关键帧位姿以及MapPoints的位置、平均观测方向等属性\n  984  \n  985      //Keyframes\n  ...\n 1026  {\n 1027      // Setup optimizer\n 1028:     // step 1：构造优化器\n 1029      g2o::SparseOptimizer optimizer;\n 1030      optimizer.setVerbose(false);\n ....\n 1059  \n 1060      // Set KeyFrame vertices\n 1061:     // step 2：将地图中所有keyframe的pose作为顶点添加到优化器\n 1062      // 尽可能使用经过Sim3调整的位姿\n 1063      // 遍历全局地图中的所有的关键帧\n ....\n 1110  \n 1111      // Set Loop edges\n 1112:     // step 3：添加边：LoopConnections是闭环时因为MapPoints调整而出现的新关键帧连接关系（不是当前帧与闭环匹配帧之间的连接关系）\n 1113      for(map<KeyFrame *, set<KeyFrame *> >::const_iterator mit = LoopConnections.begin(), mend=LoopConnections.end(); mit!=mend; mit++)\n 1114      {\n ....\n 1149  \n 1150      // Set normal edges\n 1151:     // step 4：添加跟踪时形成的边、闭环匹配成功形成的边\n 1152      for(size_t i=0, iend=vpKFs.size(); i<iend; i++)\n 1153      {\n ....\n 1169  \n 1170          // Spanning tree edge\n 1171:         // step 4.1：只添加扩展树的边（有父关键帧）\n 1172          if(pParentKF)\n 1173          {\n ....\n 1198  \n 1199          // Loop edges\n 1200:         // step 4.2：添加在CorrectLoop函数中AddLoopEdge函数添加的闭环连接边（当前帧与闭环匹配帧之间的连接关系）(这里面也包括了当前遍历到的这个关键帧之前曾经存在过的回环边)\n 1201          // 使用经过Sim3调整前关键帧之间的相对关系作为边\n 1202          const set<KeyFrame*> sLoopEdges = pKF->GetLoopEdges();\n ....\n 1228  \n 1229          // Covisibility graph edges\n 1230:         // step 4.3：最有很好共视关系的关键帧也作为边进行优化\n 1231          // 使用经过Sim3调整前关键帧之间的相对关系作为边\n 1232          const vector<KeyFrame*> vpConnectedKFs = pKF->GetCovisiblesByWeight(minFeat);\n ....\n 1268  \n 1269      // Optimize!\n 1270:     // step 5：开始g2o优化, 盘它!\n 1271      optimizer.initializeOptimization();\n 1272      optimizer.optimize(20);\n ....\n 1280  \n 1281      // SE3 Pose Recovering. Sim3:[sR t;0 1] -> SE3:[R t/s;0 1]\n 1282:     // step 6：设定优化后的位姿\n 1283      // 遍历地图中的所有关键帧\n 1284      for(size_t i=0;i<vpKFs.size();i++)\n ....\n 1305  \n 1306      // Correct points. Transform to \"non-optimized\" reference keyframe pose and transform back with optimized pose\n 1307:     // step 7：步骤5和步骤6优化得到关键帧的位姿后，MapPoints根据参考帧优化前后的相对关系调整自己的位置\n 1308      // 遍历所有地图点\n 1309      for(size_t i=0, iend=vpMPs.size(); i<iend; i++)\n ....\n 1369  int Optimizer::OptimizeSim3(KeyFrame *pKF1, KeyFrame *pKF2, vector<MapPoint *> &vpMatches1, g2o::Sim3 &g2oS12, const float th2, const bool bFixScale)\n 1370  {\n 1371:     // step 1：初始化g2o优化器\n 1372      // 先构造求解器\n 1373      g2o::SparseOptimizer optimizer;\n ....\n 1395  \n 1396      // Set Sim3 vertex\n 1397:     // step 2.1 添加Sim3顶点\n 1398      g2o::VertexSim3Expmap * vSim3 = new g2o::VertexSim3Expmap();    \n 1399      // 根据传感器类型决定是否固定尺度\n ....\n 1452              if(!pMP1->isBad() && !pMP2->isBad() && i2>=0)\n 1453              {\n 1454:                 // step 2.2 如果这对匹配点都靠谱，并且对应的2D特征点也都存在的话，添加PointXYZ顶点\n 1455                  g2o::VertexSBAPointXYZ* vPoint1 = new g2o::VertexSBAPointXYZ();\n 1456                  cv::Mat P3D1w = pMP1->GetWorldPos();\n ....\n 1484          obs1 << kpUn1.pt.x, kpUn1.pt.y;\n 1485  \n 1486:         // step 2.3 添加两个顶点（3D点）到相机投影的边 -- 投影到当前关键帧 -- 正向投影\n 1487          g2o::EdgeSim3ProjectXYZ* e12 = new g2o::EdgeSim3ProjectXYZ();\n 1488          e12->setVertex(0, dynamic_cast<g2o::OptimizableGraph::Vertex*>(optimizer.vertex(id2)));\n ....\n 1527  \n 1528      // Optimize!\n 1529:     // step 3：g2o开始优化，先迭代5次\n 1530      optimizer.initializeOptimization();\n 1531      optimizer.optimize(5);\n 1532  \n 1533:     // step 4：剔除一些误差大的边\n 1534      // Check inliers\n 1535      // 进行卡方检验，大于阈值的边剔除\n ....\n 1566  \n 1567      // Optimize again only with inliers\n 1568:     // step 5：再次g2o优化剔除后剩下的边\n 1569      optimizer.initializeOptimization();\n 1570      optimizer.optimize(nMoreIterations);\n ....\n 1589  \n 1590      // Recover optimized Sim3\n 1591:     // step 6：得到优化后的结果\n 1592      g2o::VertexSim3Expmap* vSim3_recov = static_cast<g2o::VertexSim3Expmap*>(optimizer.vertex(0));\n 1593      g2oS12= vSim3_recov->estimate();\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/ORBextractor.cc:\n  716  {\n  717      // Compute how many initial nodes\n  718:     // Step 1 根据宽高比确定初始节点数目\n  719  \t//计算应该生成的初始节点个数，根节点的数量nIni是根据边界的宽高比值确定的，一般是1或者2\n  720      // ! bug: 如果宽高比小于0.5，nIni=0, 后面hx会报错\n  ...\n  733      vpIniNodes.resize(nIni);\n  734  \n  735: \t// Step 2 生成初始提取器节点\n  736      for(int i=0; i<nIni; i++)\n  737      {      \n  ...\n  758  \n  759      //Associate points to childs\n  760:     // Step 3 将特征点分配到子提取器节点中\n  761      for(size_t i=0;i<vToDistributeKeys.size();i++)\n  762      {\n  ...\n  767      }\n  768      \n  769: \t// Step 4 遍历此提取器节点列表，标记那些不可再分裂的节点，删除那些没有分配到特征点的节点\n  770      // ? 这个步骤是必要的吗？感觉可以省略，通过判断nIni个数和vKeys.size() 就可以吧\n  771      list<ExtractorNode>::iterator lit = lNodes.begin();\n  ...\n  802      vSizeAndPointerToNode.reserve(lNodes.size()*4);\n  803  \n  804:     // Step 5 根据兴趣点分布,利用4叉树方法对图像进行划分区域\n  805      while(!bFinish)\n  806      {\n  ...\n  921          }\n  922  \n  923:         // Step 6 当再划分之后所有的Node数大于要求数目时,就慢慢划分直到使其刚刚达到或者超过要求的特征点个数\n  924          //可以展开的子节点个数nToExpand x3，是因为一分四之后，会删除原来的主节点，所以乘以3\n  925          /**\n  ...\n 1021  \n 1022      // Retain the best point in each node\n 1023:     // Step 7 保留每个区域响应值最大的一个兴趣点\n 1024      //使用这个vector来存储我们感兴趣的特征点的过滤结果\n 1025      vector<cv::KeyPoint> vResultKeys;\n ....\n 1561                        OutputArray _descriptors)\n 1562  { \n 1563: \t// Step 1 检查图像有效性。如果图像为空，那么就直接返回\n 1564      if(_image.empty())\n 1565          return;\n ....\n 1571  \n 1572      // Pre-compute the scale pyramid\n 1573:     // Step 2 构建图像金字塔\n 1574      ComputePyramid(image);\n 1575  \n 1576:     // Step 3 计算图像的特征点，并且将特征点进行均匀化。均匀的特征点可以提高位姿计算精度\n 1577  \t// 存储所有的特征点，注意此处为二维的vector，第一维存储的是金字塔的层数，第二维存储的是那一层金字塔图像里提取的所有特征点\n 1578      vector < vector<KeyPoint> > allKeypoints; \n ....\n 1584  \n 1585  \t\n 1586: \t// Step 4 拷贝图像描述子到新的矩阵descriptors\n 1587      Mat descriptors;\n 1588  \n ....\n 1645  \t\t// desc存储当前图层的描述子\n 1646          Mat desc = descriptors.rowRange(offset, offset + nkeypointsLevel);\n 1647: \t\t// Step 6 计算高斯模糊后图像的描述子\n 1648          computeDescriptors(workingMat, \t//高斯模糊之后的图层图像\n 1649  \t\t\t\t\t\t   keypoints, \t//当前图层中的特征点集合\n ....\n 1655  \n 1656          // Scale keypoint coordinates\n 1657: \t\t// Step 6 对非第0层图像中的特征点的坐标恢复到第0层图像（原图像）的坐标系下\n 1658          // ? 得到所有层特征点在第0层里的坐标放到_keypoints里面\n 1659  \t\t// 对于第0层的图像特征点，他们的坐标就不需要再进行恢复了\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/ORBmatcher.cc:\n  538      vnMatches12 = vector<int>(F1.mvKeysUn.size(),-1);\n  539  \n  540:     // Step 1 构建旋转直方图，HISTO_LENGTH = 30\n  541      vector<int> rotHist[HISTO_LENGTH];\n  542      for(int i=0;i<HISTO_LENGTH;i++)\n  ...\n  561              continue;\n  562  \n  563:         // Step 2 在半径窗口内搜索当前帧F2中所有的候选匹配特征点 \n  564          // vbPrevMatched 输入的是参考帧 F1的特征点\n  565          // windowSize = 100，输入最大最小金字塔层级 均为0\n  ...\n  577          int bestIdx2 = -1;          //最佳候选特征点在F2中的index\n  578  \n  579:         // Step 3 遍历搜索搜索窗口中的所有潜在的匹配候选点，找到最优的和次优的\n  580          for(vector<size_t>::iterator vit=vIndices2.begin(); vit!=vIndices2.end(); vit++)\n  581          {\n  ...\n  601          }\n  602  \n  603:         // Step 4 对最优次优结果进行检查，满足阈值、最优/次优比例，删除重复匹配\n  604          // 即使算出了最佳描述子匹配距离，也不一定保证配对成功。要小于设定阈值\n  605          if(bestDist<=TH_LOW)\n  ...\n  621                  nmatches++;\n  622  \n  623:                 // Step 5 计算匹配点旋转角度差所在的直方图\n  624                  if(mbCheckOrientation)\n  625                  {\n  ...\n  642      }\n  643  \n  644:     // Step 6 筛除旋转直方图中“非主流”部分\n  645      if(mbCheckOrientation)\n  646      {\n  ...\n  670  \n  671      //Update prev matched\n  672:     // Step 7 将最后通过筛选的匹配好的特征点保存到vbPrevMatched\n  673      for(size_t i1=0, iend1=vnMatches12.size(); i1<iend1; i1++)\n  674          if(vnMatches12[i1]>=0)\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/PnPsolver.cc:\n   77  //   |1|   |0  0  1 ||r32 r32 r33 t3||1|\n   78  \n   79: // step1:用四个控制点来表达所有的3D点\n   80  // p_w = sigma(alphas_j * pctrl_w_j), j从0到4\n   81  // p_c = sigma(alphas_j * pctrl_c_j), j从0到4\n   82  // sigma(alphas_j) = 1,  j从0到4\n   83  \n   84: // step2:根据针孔投影模型\n   85  // s * u = K * sigma(alphas_j * pctrl_c_j), j从0到4\n   86  \n   87: // step3:将step2的式子展开, 消去s\n   88  // sigma(alphas_j * fx * Xctrl_c_j) + alphas_j * (u0-u)*Zctrl_c_j = 0\n   89  // sigma(alphas_j * fy * Xctrl_c_j) + alphas_j * (v0-u)*Zctrl_c_j = 0\n   90  \n   91: // step4:将step3中的12未知参数（4个控制点*3维参考点坐标）提成列向量\n   92  // Mx = 0,计算得到初始的解x后可以用Gauss-Newton来提纯得到四个相机坐标系的控制点\n   93  \n   94: // step5:根据得到的p_w和对应的p_c，最小化重投影误差即可求解出R t\n   95  \n   96  \n   ..\n  183      // 注意这次里在每一次采样的过程中,需要采样四个点,即最小集应该设置为4\n  184  \n  185:     // step 1 获取给定的参数\n  186      mRansacProb = probability;\n  187      mRansacMinInliers = minInliers;\n  ...\n  191  \n  192  \n  193:     // step 2 计算理论内点数,并且选 min(给定内点数,最小集,理论内点数) 作为最终在迭代过程中使用的最小内点数\n  194      N = mvP2D.size(); // number of correspondences, 所有二维特征点个数\n  195  \n  ...\n  206      mRansacMinInliers = nMinInliers;\n  207  \n  208:     // step 3 根据敲定的\"最小内点数\"来调整 内点数/总体数 这个比例 epsilon\n  209  \n  210      // 这个变量却是希望取得高一点,也可以理解为想让和调整之后的内点数 mRansacMinInliers 保持一致吧\n  ...\n  212          mRansacEpsilon=(float)mRansacMinInliers/N;\n  213  \n  214:     // step 4  根据给出的各种参数计算RANSAC的理论迭代次数,并且敲定最终在迭代过程中使用的RANSAC最大迭代次数\n  215      // Set RANSAC iterations according to probability, epsilon, and max iterations -- 这个部分和Sim3Solver中的操作是一样的\n  216      int nIterations;\n  ...\n  223      mRansacMaxIts = max(1,min(nIterations,mRansacMaxIts));\n  224  \n  225:     // step 5 计算不同图层上的特征点在进行内点检验的时候,所使用的不同判断误差阈值\n  226  \n  227      mvMaxError.resize(mvSigma2.size());// 图像提取特征的时候尺度层数\n  ...\n  508  {\n  509    // Take C0 as the reference points centroid:\n  510:   // step 1：第一个控制点：参与PnP计算的参考3D点的几何中心\n  511    cws[0][0] = cws[0][1] = cws[0][2] = 0;\n  512    // 遍历每个匹配点中的3D点，然后对每个坐标轴加和\n  ...\n  520  \n  521    // Take C1, C2, and C3 from PCA on the reference points:\n  522:   // step 2：计算其它三个控制点，C1, C2, C3通过PCA分解得到\n  523    // TODO \n  524    // ref: https://www.zhihu.com/question/38417101\n  ...\n  533    CvMat UCt     = cvMat(3, 3, CV_64F, uct);         // 分解上面矩阵得到的左奇异矩阵\n  534  \n  535:   // step 2.1：将存在pws中的参考3D点减去第一个控制点的坐标（相当于把第一个控制点作为原点）, 并存入PW0\n  536    for(int i = 0; i < number_of_correspondences; i++)\n  537      for(int j = 0; j < 3; j++)\n  538        PW0->data.db[3 * i + j] = pws[3 * i + j] - cws[0][j];\n  539  \n  540:   // step 2.2：利用SVD分解P'P可以获得P的主分量\n  541    // 类似于齐次线性最小二乘求解的过程，\n  542    // PW0的转置乘以PW0\n  ...\n  551    cvReleaseMat(&PW0);\n  552  \n  553:   // step 2.3：得到C1, C2, C3三个3D控制点，最后加上之前减掉的第一个控制点这个偏移量\n  554    // 讲道理这里的条件不应写成4,而应该是变量 number_of_correspondences 啊\n  555    for(int i = 1; i < 4; i++) {\n  ...\n  577  \n  578    // 第一个控制点在质心的位置，后面三个控制点减去第一个控制点的坐标（以第一个控制点为原点）\n  579:   // step 1：减去质心后得到x y z轴\n  580    // \n  581    // cws的排列 |cws1_x cws1_y cws1_z|  ---> |cws1|\n  ...\n  649  void PnPsolver::compute_ccs(const double * betas, const double * ut)\n  650  {\n  651:   // step 1 赋值初始值为0\n  652    for(int i = 0; i < 4; i++)\n  653      ccs[i][0] = ccs[i][1] = ccs[i][2] = 0.0f;\n  654  \n  655:   // step 2 \n  656    for(int i = 0; i < 4; i++) {\n  657      // 注意这里传过来的向量ut中,最后的部分才是v,依次是  x  x  x  ... x v4 v3 v2 v1\n  ...\n  684  double PnPsolver::compute_pose(double R[3][3], double t[3])\n  685  {\n  686:   // step 1：获得EPnP算法中的四个控制点\n  687    choose_control_points();\n  688:   // step 2：计算世界坐标系下每个3D点用4个控制点线性表达时的系数alphas，公式1\n  689    compute_barycentric_coordinates();\n  690  \n  691:   // step 3：构造M矩阵，EPnP原始论文中公式(3)(4)-->(5)(6)(7); 矩阵的大小为 2n*12 ,n 为使用的匹配点的对数\n  692    CvMat * M = cvCreateMat(2 * number_of_correspondences, 12, CV_64F);\n  693  \n  ...\n  701    CvMat Ut  = cvMat(12, 12, CV_64F, ut);    // 左奇异向量\n  702  \n  703:   // step 4：求解Mx = 0\n  704  \n  705:   // step 4.1 先计算其中的特征向量vi\n  706    // SVD分解M'M\n  707    cvMulTransposed(M, &MtM, 1);\n  ...\n  709    cvReleaseMat(&M);\n  710  \n  711:   // step 4.2 计算分情况讨论的时候需要用到的矩阵L和\\rho\n  712    // EPnP论文中式13中的L和\\rho\n  713    double l_6x10[6 * 10], rho[6];\n  ...\n  720  \n  721  \n  722:   // step 4.3 分情况计算N=2,3,4时能够求解得到的相机位姿R,t并且得到平均重投影误差\n  723    double Betas[4][4],         // 本质上就四个beta1~4,但是这里有四种情况(第一维度表示)\n  724           rep_errors[4];       //? 迭代误差? 重投影误差?\n  ...\n  747    rep_errors[3] = compute_R_and_t(ut, Betas[3], Rs[3], ts[3]);\n  748  \n  749:   // step 5 看看哪种情况得到的效果最好,然后就选哪个\n  750    int N = 1;    // trick , 这样可以减少一种情况的计算\n  751    if (rep_errors[2] < rep_errors[1]) N = 2;\n  752    if (rep_errors[3] < rep_errors[N]) N = 3;\n  753  \n  754:   // step 6 收尾,将计算结果保存到返回计算结果用的变量中\n  755    copy_R_and_t(Rs[N], ts[N], R, t);\n  756  \n  757:   // step 7 并且返回平均匹配点对的重投影误差,作为对相机位姿估计的评价\n  758    return rep_errors[N];\n  759  }\n  ...\n  816  void PnPsolver::estimate_R_and_t(double R[3][3], double t[3])\n  817  {\n  818:   // step 1 计算3D点的质心\n  819    double pc0[3],                                              //3D点世界坐标系下坐标的质心\n  820           pw0[3];                                              //3D点相机坐标系下坐标的质心\n  ...\n  845    CvMat ABt_V = cvMat(3, 3, CV_64F, abt_v);     // 奇异值分解得到的右特征矩阵\n  846  \n  847:   // step 2 构造矩阵H=B^T*A,不过这里是隐含的构造\n  848    cvSetZero(&ABt);\n  849    // 遍历每一个3D点\n  ...\n  861    }\n  862  \n  863:   // step 3 对得到的H矩阵进行奇异值分解\n  864    cvSVD(&ABt, &ABt_D, &ABt_U, &ABt_V, CV_SVD_MODIFY_A);\n  865  \n  866:   // step 4 R=U*V^T, 并且进行合法性检查\n  867    for(int i = 0; i < 3; i++)\n  868      for(int j = 0; j < 3; j++)\n  ...\n  880    }\n  881  \n  882:   // step 5 t就这么算\n  883    t[0] = pc0[0] - dot(R[0], pw0);\n  884    t[1] = pc0[1] - dot(R[1], pw0);\n  ...\n  918  \t\t\t     double R[3][3], double t[3])\n  919  {\n  920:   // step 1 根据前面的计算结果来\"组装\"得到控制点在当前相机坐标系下的坐标\n  921    compute_ccs(betas, ut);\n  922:   // step 2 将世界坐标系下的3D点的坐标转换到控制点的坐标系下\n  923    compute_pcs();\n  924:   // step 3 调整点坐标的符号,来保证在相机坐标系下点的深度为正\n  925    solve_for_sign();\n  926  \n  927:   // step 4 然后就是计算R和t \n  928    estimate_R_and_t(R, t);\n  929  \n  930:   // step 5 计算使用这个位姿,所得到的每对点平均的重投影误差,并且返回\n  931    return reprojection_error(R, t);\n  932  }\n  ...\n 1187      double * rowA = A->data.db + i * 4;\n 1188  \n 1189:     // step 1: 计算当前行的雅克比\n 1190      rowA[0] = 2 * rowL[0] * betas[0] +     rowL[1] * betas[1] +     rowL[3] * betas[2] +     rowL[6] * betas[3];\n 1191      rowA[1] =     rowL[1] * betas[0] + 2 * rowL[2] * betas[1] +     rowL[4] * betas[2] +     rowL[7] * betas[3];\n ....\n 1193      rowA[3] =     rowL[6] * betas[0] +     rowL[7] * betas[1] +     rowL[8] * betas[2] + 2 * rowL[9] * betas[3];\n 1194  \n 1195:     // step 2: 计算当前行的非齐次项\n 1196      cvmSet(b, i, 0, rho[i] -\n 1197  \t   (                                    // 从0开始的下标 | 从1开始的下标\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Sim3Solver.cc:\n  229  \n  230          // Get min set of points\n  231:         // STEP 1：任意取三组点算Sim矩阵\n  232          for(short i = 0; i < 3; ++i)\n  233          {\n  ...\n  249          }\n  250  \n  251:         // STEP 2：根据两组匹配的3D点，计算之间的Sim3变换\n  252          ComputeSim3(P3Dc1i,P3Dc2i);\n  253  \n  254:         // STEP 3：通过投影误差进行inlier检测\n  255          CheckInliers();\n  256  \n  ...\n  313      // Horn 1987, Closed-form solution of absolute orientataion using unit quaternions\n  314  \n  315:     // Step 1: Centroid and relative coordinates\n  316  \n  317      cv::Mat Pr1(P1.size(),P1.type()); // Relative coordinates to centroid (set 1)\n  ...\n  325      ComputeCentroid(P2,Pr2,O2);\n  326  \n  327:     // Step 2: Compute M matrix\n  328      // 这里是按照\"大于三组匹配点\"中的M矩阵来计算的;形式和论文中略有不同,但是本质上是一样的\n  329      cv::Mat M = Pr2*Pr1.t();\n  330  \n  331:     // Step 3: Compute N matrix\n  332  \n  333      double N11, N12, N13, N14, N22, N23, N24, N33, N34, N44;\n  ...\n  352  \n  353  \n  354:     // Step 4: Eigenvector of the highest eigenvalue\n  355  \n  356      cv::Mat eval, evec;  // val vec\n  ...\n  386      cv::Rodrigues(vec,mR12i); // computes the rotation matrix from angle-axis\n  387  \n  388:     // Step 5: Rotate set 2\n  389      // 要放到同一个坐标系下进行计算\n  390      cv::Mat P3 = mR12i*Pr2;\n  391  \n  392:     // Step 6: Scale\n  393  \n  394      if(!mbFixScale)\n  ...\n  418          ms12i = 1.0f;\n  419  \n  420:     // Step 7: Translation\n  421  \n  422      mt12i.create(1,3,P1.type());\n  ...\n  424      mt12i = O1 - ms12i*mR12i*O2;\n  425  \n  426:     // Step 8: Transformation\n  427      // 计算双向的位姿变换,目的是在下面的检查的过程中能够进行双向的投影操作\n  428  \n  429:     // Step 8.1 T12\n  430      mT12i = cv::Mat::eye(4,4,P1.type());\n  431  \n  ...\n  437      mt12i.copyTo(mT12i.rowRange(0,3).col(3));\n  438  \n  439:     // Step 8.2 T21\n  440  \n  441      mT21i = cv::Mat::eye(4,4,P1.type());\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Tracking.cc:\n   92  {\n   93      // Load camera parameters from settings file\n   94:     // Step 1 从配置文件中加载相机参数\n   95      cv::FileStorage fSettings(strSettingPath, cv::FileStorage::READ);\n   96      float fx = fSettings[\"Camera.fx\"];\n   ..\n  162      // Load ORB parameters\n  163  \n  164:     // Step 2 加载ORB特征点有关的参数,并新建特征点提取器\n  165  \n  166      // 每一帧提取的特征点数 1000\n  ...\n  248      cv::Mat imGrayRight = imRectRight;\n  249  \n  250:     // step 1 ：将RGB或RGBA图像转为灰度图像\n  251      if(mImGray.channels()==3)\n  252      {\n  ...\n  277      }\n  278  \n  279:     // step 2 ：构造Frame\n  280      mCurrentFrame = Frame(\n  281          mImGray,                //左目图像\n  ...\n  290          mThDepth);              //远点,近点的区分阈值\n  291  \n  292:     // step 3 ：跟踪\n  293      Track();\n  294  \n  ...\n  309      cv::Mat imDepth = imD;\n  310  \n  311:     // step 1：将RGB或RGBA图像转为灰度图像\n  312      if(mImGray.channels()==3)\n  313      {\n  ...\n  325      }\n  326  \n  327:     // step 2 ：将深度相机的disparity转为Depth , 也就是转换成为真正尺度下的深度\n  328      //这里的判断条件感觉有些尴尬\n  329      //前者和后者满足一个就可以了\n  ...\n  366      mImGray = im;\n  367  \n  368:     // Step 1 ：将RGB或RGBA图像转为灰度图像\n  369      if(mImGray.channels()==3)\n  370      {\n  ...\n  382      }\n  383  \n  384:     // Step 2 ：构造Frame\n  385      if(mState==NOT_INITIALIZED || mState==NO_IMAGES_YET)// 没有成功初始化的前一个状态就是NO_IMAGES_YET\n  386          mCurrentFrame = Frame(\n  ...\n  404              mThDepth);\n  405  \n  406:     // Step 3 ：跟踪\n  407      Track();\n  408  \n  ...\n  436      unique_lock<mutex> lock(mpMap->mMutexMapUpdate);\n  437  \n  438:     // Step 1：初始化\n  439      if(mState==NOT_INITIALIZED)\n  440      {\n  ...\n  453              return;\n  454      }\n  455:     // Step 2：跟踪\n  456      else\n  457      {\n  ...\n  480                  CheckReplacedInLastFrame();\n  481  \n  482:                 // step 2.1：跟踪上一帧或者参考帧或者重定位\n  483  \n  484                  // 运动模型是空的或刚完成重定位\n  ...\n  524              // 只进行跟踪tracking，局部地图不工作\n  525   \n  526:             // step 2.1：跟踪上一帧或者参考帧或者重定位\n  527  \n  528              // tracking跟丢了, 那么就只能进行重定位了\n  ...\n  628  \n  629          // If we have an initial estimation of the camera pose and matching. Track the local map.\n  630:         // step 2.2：在帧间匹配得到初始的姿态后，现在对local map进行跟踪得到更多的匹配，并优化当前位姿\n  631          // NOTICE local map:当mpReferenceKF前帧、当前帧的MapPoints、当前关键帧与其它关键帧共视关系\n  632          //? 没有其他帧的地图点mpReferenceKF吗? \n  ...\n  666              if(!mLastFrame.mTcw.empty())\n  667              {\n  668:                 // step 2.3：更新恒速运动模型 TrackWithMotionModel 中的mVelocity\n  669                  cv::Mat LastTwc = cv::Mat::eye(4,4,CV_32F);\n  670                  //? 这个是转换成为了相机相对世界坐标系的旋转?\n  ...\n  681  \n  682              // Clean VO matches\n  683:             // step 2.4：清除UpdateLastFrame中为当前帧临时添加的MapPoints   \n  684              //? \n  685              for(int i=0; i<mCurrentFrame.N; i++)\n  ...\n  696  \n  697              // Delete temporal MapPoints\n  698:             // step 2.5：清除临时的MapPoints，这些MapPoints在 TrackWithMotionModel 的 UpdateLastFrame 函数里生成（仅双目和rgbd）\n  699              // 步骤2.4中只是在当前帧中将这些MapPoints剔除，这里从MapPoints数据库中删除\n  700              // 这里生成的仅仅是为了提高双目或rgbd摄像头的帧间跟踪效果，用完以后就扔了，没有添加到地图中\n  ...\n  712  \n  713              // Check if we need to insert a new keyframe\n  714:             // step 2.6：检测并插入关键帧，对于双目会产生新的MapPoints\n  715              // NOTICE 在关键帧的时候生成地图点\n  716              if(NeedNewKeyFrame())\n  ...\n  721              // if they are outliers or not. We don't want next frame to estimate its position\n  722              // with those points so we discard them in the frame.\n  723:             // step 2.7 删除那些在bundle adjustment中检测为outlier的3D map点\n  724              for(int i=0; i<mCurrentFrame.N;i++)\n  725              {\n  ...\n  752  \n  753      // Store frame pose information to retrieve the complete camera trajectory afterwards.\n  754:     // step 3：记录位姿信息，用于轨迹复现\n  755      if(!mCurrentFrame.mTcw.empty())\n  756      {\n  ...\n  787      {\n  788          // Set Frame pose to the origin\n  789:         // step 1：设定初始位姿\n  790          mCurrentFrame.SetPose(cv::Mat::eye(4,4,CV_32F));\n  791  \n  792          // Create KeyFrame\n  793:         // step 2：将当前帧构造为初始关键帧\n  794          // mCurrentFrame的数据类型为Frame\n  795          // KeyFrame包含Frame、地图3D点、以及BoW\n  ...\n  801          // Insert KeyFrame in the map\n  802          // KeyFrame中包含了地图、反过来地图中也包含了KeyFrame，相互包含\n  803:         // step 3：在地图中添加该初始关键帧\n  804          mpMap->AddKeyFrame(pKFini);\n  805  \n  806          // Create MapPoints and asscoiate to KeyFrame\n  807:         // step 4：为每个特征点构造MapPoint\n  808          for(int i=0; i<mCurrentFrame.N;i++)\n  809          {\n  ...\n  812              if(z>0)\n  813              {\n  814:                 // step 4.1：通过反投影得到该特征点的3D坐标\n  815                  cv::Mat x3D = mCurrentFrame.UnprojectStereo(i);\n  816:                 // step 4.2：将3D点构造为MapPoint\n  817                  MapPoint* pNewMP = new MapPoint(x3D,pKFini,mpMap);\n  818  \n  819:                 // step 4.3：为该MapPoint添加属性：\n  820                  // a.观测到该MapPoint的关键帧\n  821                  // b.该MapPoint的描述子\n  ...\n  831                  pNewMP->UpdateNormalAndDepth();\n  832  \n  833:                 // step 4.4：在地图中添加该MapPoint\n  834                  mpMap->AddMapPoint(pNewMP);\n  835:                 // step 4.5：表示该KeyFrame的哪个特征点可以观测到哪个3D点\n  836                  pKFini->AddMapPoint(pNewMP,i);\n  837  \n  838:                 // step 4.6：将该MapPoint添加到当前帧的mvpMapPoints中\n  839                  // 为当前Frame的特征点与MapPoint之间建立索引\n  840                  mCurrentFrame.mvpMapPoints[i]=pNewMP;\n  ...\n  844          cout << \"New map created with \" << mpMap->MapPointsInMap() << \" points\" << endl;\n  845  \n  846:         // step 4：在局部地图中添加该初始关键帧\n  847          mpLocalMapper->InsertKeyFrame(pKFini);\n  848  \n  ...\n  882  void Tracking::MonocularInitialization()\n  883  {\n  884:     // Step 1 如果单目初始器还没有被创建，则创建。后面如果重新初始化时会清掉这个\n  885      if(!mpInitializer)\n  886      {\n  ...\n  915      {\n  916          // Try to initialize\n  917:         // Step 2 如果当前帧特征点数太少（不超过100），则重新构造初始器\n  918          // NOTICE 只有连续两帧的特征点个数都大于100时，才能继续进行初始化过程\n  919          if((int)mCurrentFrame.mvKeys.size()<=100)\n  ...\n  926  \n  927          // Find correspondences\n  928:         // Step 3 在mInitialFrame与mCurrentFrame中找匹配的特征点对\n  929          ORBmatcher matcher(\n  930              0.9,        //最佳的和次佳特征点评分的比值阈值，这里是比较宽松的，跟踪时一般是0.7\n  ...\n  941  \n  942          // Check if there are enough correspondences\n  943:         // Step 4 验证匹配结果，如果初始化的两帧之间的匹配点太少，重新初始化\n  944          if(nmatches<100)\n  945          {\n  ...\n  953          vector<bool> vbTriangulated; // Triangulated Correspondences (mvIniMatches)\n  954  \n  955:         // Step 5 通过H模型或F模型进行单目初始化，得到两帧间相对运动、初始MapPoints\n  956          if(mpInitializer->Initialize(\n  957              mCurrentFrame,      //当前帧\n  ...\n  961              vbTriangulated))    //以及对应于mvIniMatches来讲,其中哪些点被三角化了\n  962          {\n  963:             // Step 6 初始化成功后，删除那些无法进行三角化的匹配点\n  964              for(size_t i=0, iend=mvIniMatches.size(); i<iend;i++)\n  965              {\n  ...\n  972  \n  973              // Set Frame Poses\n  974:             // Step 7 将初始化的第一帧作为世界坐标系，因此第一帧变换矩阵为单位矩阵\n  975              mInitialFrame.SetPose(cv::Mat::eye(4,4,CV_32F));\n  976              // 由Rcw和tcw构造Tcw,并赋值给mTcw，mTcw为世界坐标系到相机坐标系的变换矩阵\n  ...\n  980              mCurrentFrame.SetPose(Tcw);\n  981  \n  982:             // Step 8 创建初始化地图点MapPoints\n  983              // Initialize函数会得到mvIniP3D，\n  984              // mvIniP3D是cv::Point3f类型的一个容器，是个存放3D点的临时变量，\n  ...\n 1001      KeyFrame* pKFcur = new KeyFrame(mCurrentFrame,mpMap,mpKeyFrameDB);  // 第二帧\n 1002  \n 1003:     // step 1：将初始关键帧的描述子转为BoW\n 1004      pKFini->ComputeBoW();\n 1005:     // step 2：将当前关键帧的描述子转为BoW\n 1006      pKFcur->ComputeBoW();\n 1007  \n 1008      // Insert KFs in the map\n 1009:     // step 3：将关键帧插入到地图\n 1010      // 凡是关键帧，都要插入地图\n 1011      mpMap->AddKeyFrame(pKFini);\n ....\n 1013  \n 1014      // Create MapPoints and asscoiate to keyframes\n 1015:     // step 4：将3D点包装成MapPoints\n 1016      for(size_t i=0; i<mvIniMatches.size();i++)\n 1017      {\n ....\n 1023          cv::Mat worldPos(mvIniP3D[i]);\n 1024  \n 1025:         // step 4.1：用3D点构造MapPoint\n 1026          MapPoint* pMP = new MapPoint(\n 1027              worldPos,\n ....\n 1034              mpMap);\n 1035  \n 1036:         // step 4.2：为该MapPoint添加属性：\n 1037          // a.观测到该MapPoint的关键帧\n 1038          // b.该MapPoint的描述子\n 1039          // c.该MapPoint的平均观测方向和深度范围\n 1040  \n 1041:         // step 4.3：表示该KeyFrame的哪个特征点可以观测到哪个3D点\n 1042          pKFini->AddMapPoint(pMP,i);\n 1043          pKFcur->AddMapPoint(pMP,mvIniMatches[i]);\n ....\n 1059  \n 1060          //Add to Map\n 1061:         // step 4.4：在地图中添加该MapPoint\n 1062          mpMap->AddMapPoint(pMP);\n 1063      }//将3D点包装成MapPoints\n 1064  \n 1065      // Update Connections\n 1066:     // step 4.5：更新关键帧间的连接关系\n 1067      // 在3D点和关键帧之间建立边，每个边有一个权重，边的权重是该关键帧与当前帧公共3D点的个数\n 1068      pKFini->UpdateConnections();\n ....\n 1072      cout << \"New Map created with \" << mpMap->MapPointsInMap() << \" points\" << endl;\n 1073  \n 1074:     // step 5：BA优化\n 1075      Optimizer::GlobalBundleAdjustemnt(mpMap,20);\n 1076  \n 1077      // Set median depth to 1\n 1078:     // step 6：!!!将MapPoints的中值深度归一化到1，并归一化两帧之间变换      NOTICE\n 1079      // 评估关键帧场景深度，q=2表示中值\n 1080      //? 为什么是 pKFini 而不是 pKCur ?\n ....\n 1176  {\n 1177      // Compute Bag of Words vector\n 1178:     // step 1：将当前帧的描述子转化为BoW向量\n 1179      mCurrentFrame.ComputeBoW();\n 1180  \n ....\n 1184      vector<MapPoint*> vpMapPointMatches;\n 1185  \n 1186:     // step 2：通过特征点的BoW加快当前帧与参考帧之间的特征点匹配\n 1187      //NOTICE 之前师兄说的，通过词袋模型加速匹配就是在这里哇\n 1188      // 特征点的匹配关系由MapPoints进行维护\n ....\n 1196          return false;\n 1197  \n 1198:     // step 3:将上一帧的位姿态作为当前帧位姿的初始值\n 1199      mCurrentFrame.mvpMapPoints = vpMapPointMatches;\n 1200      mCurrentFrame.SetPose(mLastFrame.mTcw); // 用上一次的Tcw设置初值，在PoseOptimization可以收敛快一些\n 1201  \n 1202:     // step 4:通过优化3D-2D的重投影误差来获得位姿\n 1203      Optimizer::PoseOptimization(&mCurrentFrame);\n 1204  \n 1205      // Discard outliers\n 1206:     // step 5：剔除优化后的outlier匹配点（MapPoints）\n 1207      //之所以在优化之后才剔除外点，是因为在优化的过程中就有了对这些外点的标记\n 1208      int nmatchesMap = 0;\n ....\n 1242  {\n 1243      // Update pose according to reference keyframe\n 1244:     // step 1：更新最近一帧的位姿\n 1245      KeyFrame* pRef = mLastFrame.mpReferenceKF;  //上一帧的参考KF\n 1246      // ref_keyframe 到 lastframe的位姿\n ....\n 1253          return;\n 1254  \n 1255:     // step 2：对于双目或rgbd摄像头，为上一帧临时生成新的MapPoints\n 1256      // 注意这些MapPoints不加入到Map中，在tracking的最后会删除\n 1257      // 跟踪过程中需要将将上一帧的MapPoints投影到当前帧可以缩小匹配范围，加快当前帧与上一帧进行特征点匹配\n ....\n 1259      // Create \"visual odometry\" MapPoints\n 1260      // We sort points according to their measured depth by the stereo/RGB-D sensor\n 1261:     // step 2.1：得到上一帧有深度值的特征点\n 1262      //第一个元素是某个点的深度,第二个元素是对应的特征点id\n 1263      vector<pair<float,int> > vDepthIdx;\n ....\n 1278          return;\n 1279  \n 1280:     // step 2.2：按照深度从小到大排序\n 1281      sort(vDepthIdx.begin(),vDepthIdx.end());\n 1282  \n 1283      // We insert all close points (depth<mThDepth)\n 1284      // If less than 100 close points, we insert the 100 closest ones.\n 1285:     // step 2.3：将距离比较近的点包装成MapPoints\n 1286      int nPoints = 0;\n 1287      for(size_t j=0; j<vDepthIdx.size();j++)\n ....\n 1352      // Update last frame pose according to its reference keyframe\n 1353      // Create \"visual odometry\" points\n 1354:     // step 1：更新上一帧的位姿；对于双目或rgbd摄像头，还会根据深度值为上一关键帧生成新的MapPoints\n 1355      // （跟踪过程中需要将当前帧与上一帧进行特征点匹配，将上一帧的MapPoints投影到当前帧可以缩小匹配范围）\n 1356      // 在跟踪过程中，去除outlier的MapPoint，如果不及时增加MapPoint会逐渐减少\n ....\n 1373          th=7;\n 1374  \n 1375:     // step 2：根据匀速度模型进行对上一帧的MapPoints进行跟踪, 根据上一帧特征点对应的3D点投影的位置缩小特征点匹配范围\n 1376      //我觉的这个才是使用恒速模型的根本目的\n 1377      int nmatches = matcher.SearchByProjection(mCurrentFrame,mLastFrame,th,mSensor==System::MONOCULAR);\n ....\n 1390  \n 1391      // Optimize frame pose with all matches\n 1392:     // step 3：优化位姿\n 1393      Optimizer::PoseOptimization(&mCurrentFrame);\n 1394  \n 1395      // Discard outliers\n 1396:     // step 4：优化位姿后剔除outlier的mvpMapPoints,这个和前面相似\n 1397      int nmatchesMap = 0;\n 1398      for(int i =0; i<mCurrentFrame.N; i++)\n ....\n 1442  \n 1443      // Update Local KeyFrames and Local Points\n 1444:     // step 1：更新局部关键帧mvpLocalKeyFrames和局部地图点mvpLocalMapPoints\n 1445      UpdateLocalMap();\n 1446  \n 1447:     // step 2：在局部地图中查找与当前帧匹配的MapPoints,并将MapPoints关联到CurrentF的keypoint\n 1448      SearchLocalPoints();\n 1449  \n 1450      // Optimize Pose\n 1451      // 在这个函数之前，在 Relocalization、TrackReferenceKeyFrame、TrackWithMotionModel 中都有位姿优化，\n 1452:     // step 3：更新局部所有MapPoints后对位姿再次优化\n 1453      Optimizer::PoseOptimization(&mCurrentFrame);\n 1454      mnMatchesInliers = 0;\n 1455  \n 1456      // Update MapPoints Statistics\n 1457:     // step 3：更新当前帧的MapPoints被观测程度，并统计跟踪局部地图的效果\n 1458      for(int i=0; i<mCurrentFrame.N; i++)\n 1459      {\n ....\n 1485      // Decide if the tracking was succesful\n 1486      // More restrictive if there was a relocalization recently\n 1487:     // step 4：决定是否跟踪成功\n 1488      //如果最近刚刚发生了重定位,那么至少跟踪上了50个点我们才认为是跟踪上了\n 1489      if(mCurrentFrame.mnId<mnLastRelocFrameId+mMaxFrames && mnMatchesInliers<50)\n ....\n 1516  \n 1517      // Do not insert keyframes if not enough frames have passed from last relocalisation\n 1518:     // step 2：判断是否距离上一次插入关键帧的时间太短\n 1519      // mCurrentFrame.mnId是当前帧的ID\n 1520      // mnLastRelocFrameId是最近一次重定位帧的ID\n ....\n 1527  \n 1528      // Tracked MapPoints in the reference keyframe\n 1529:     // step 3：得到参考关键帧跟踪到的MapPoints数量\n 1530  \t// NOTICE 在 UpdateLocalKeyFrames 函数中会将与当前关键帧共视程度最高的关键帧设定为当前帧的参考关键帧 -- 一般的参考关键帧的选择原则\n 1531      //地图点的最小观测次数\n ....\n 1537  \n 1538      // Local Mapping accept keyframes?\n 1539:     // step 4：查询局部地图管理器是否繁忙,也就是当前能否接受新的关键帧\n 1540      bool bLocalMappingIdle = mpLocalMapper->AcceptKeyFrames();\n 1541      // \"total matches = matches to map + visual odometry matches\"\n 1542      // Visual odometry matches will become MapPoints if we insert a keyframe.\n 1543      // This ratio measures how many MapPoints we could create if we insert a keyframe.\n 1544:     // step 5：对于双目或RGBD摄像头，统计 总的可以添加的MapPoints数量 和 跟踪到地图中的MapPoints数量\n 1545      int nMap = 0;       //现有地图中,可以被关键帧观测到的地图点数目\n 1546      int nTotal= 0;      //当前帧中可以添加到地图中的地图点数量\n ....\n 1570      const float ratioMap = (float)nMap/(float)(std::max(1,nTotal));\n 1571  \n 1572:     // step 6：决策是否需要插入关键帧\n 1573      // Thresholds\n 1574      // 设定inlier阈值，和之前帧特征点匹配的inlier比例\n ....\n 1647          return;\n 1648  \n 1649:     // step 1：将当前帧构造成关键帧\n 1650      KeyFrame* pKF = new KeyFrame(mCurrentFrame,mpMap,mpKeyFrameDB);\n 1651  \n 1652:     // step 2：将当前关键帧设置为当前帧的参考关键帧\n 1653      // 在UpdateLocalKeyFrames函数中会将与当前关键帧共视程度最高的关键帧设定为当前帧的参考关键帧\n 1654      mpReferenceKF = pKF;\n ....\n 1656  \n 1657      // 这段代码和 UpdateLastFrame 中的那一部分代码功能相同\n 1658:     // step 3：对于双目或rgbd摄像头，为当前帧生成新的MapPoints\n 1659      if(mSensor!=System::MONOCULAR)\n 1660      {\n ....\n 1665          // We create all those MapPoints whose depth < mThDepth.\n 1666          // If there are less than 100 close points we create the 100 closest.\n 1667:         // step 3.1：得到当前帧深度小于阈值的特征点\n 1668          // 创建新的MapPoint, depth < mThDepth\n 1669          //第一个元素是深度,第二个元素是对应的特征点的id\n ....\n 1681          if(!vDepthIdx.empty())\n 1682          {\n 1683:             // step 3.2：按照深度从小到大排序\n 1684              sort(vDepthIdx.begin(),vDepthIdx.end());\n 1685  \n 1686:             // step 3.3：将距离比较近的点包装成MapPoints\n 1687              //处理的近点的个数\n 1688              int nPoints = 0;\n ....\n 1755  {\n 1756      // Do not search map points already matched\n 1757:     // step 1：遍历当前帧的mvpMapPoints，标记这些MapPoints不参与之后的搜索\n 1758      // 因为当前的mvpMapPoints一定在当前帧的视野中\n 1759      for(vector<MapPoint*>::iterator vit=mCurrentFrame.mvpMapPoints.begin(), vend=mCurrentFrame.mvpMapPoints.end(); vit!=vend; vit++)\n ....\n 1782  \n 1783      // Project points in frame and check its visibility\n 1784:     // step 2：将所有 局部MapPoints 投影到当前帧，判断是否在视野范围内，然后进行投影匹配\n 1785      for(vector<MapPoint*>::iterator vit=mvpLocalMapPoints.begin(), vend=mvpLocalMapPoints.end(); vit!=vend; vit++)\n 1786      {\n ....\n 1795          \n 1796          // Project (this fills MapPoint variables for matching)\n 1797:         // step 2.1：判断LocalMapPoints中的点是否在在视野内\n 1798          if(mCurrentFrame.isInFrustum(pMP,0.5))\n 1799          {\n ....\n 1819              th=5;\n 1820  \n 1821:         // step 2.2：对视野范围内的MapPoints通过投影进行特征点匹配\n 1822          matcher.SearchByProjection(mCurrentFrame,mvpLocalMapPoints,th);\n 1823      }\n ....\n 1851  void Tracking::UpdateLocalPoints()\n 1852  {\n 1853:     // step 1：清空局部MapPoints\n 1854      mvpLocalMapPoints.clear();\n 1855  \n 1856:     // step 2：遍历局部关键帧 in mvpLocalKeyFrames\n 1857      for(vector<KeyFrame*>::const_iterator itKF=mvpLocalKeyFrames.begin(), itEndKF=mvpLocalKeyFrames.end(); itKF!=itEndKF; itKF++)\n 1858      {\n ....\n 1860          const vector<MapPoint*> vpMPs = pKF->GetMapPointMatches();\n 1861  \n 1862:         // step 2：将局部关键帧的MapPoints添加到mvpLocalMapPoints\n 1863          for(vector<MapPoint*>::const_iterator itMP=vpMPs.begin(), itEndMP=vpMPs.end(); itMP!=itEndMP; itMP++)\n 1864          {\n ....\n 1887  {\n 1888      // Each map point vote for the keyframes in which it has been observed\n 1889:     // step 1：遍历当前帧的MapPoints，记录所有能观测到当前帧MapPoints的关键帧 -- 也就是投票\n 1890      map<KeyFrame*,int> keyframeCounter;\n 1891      for(int i=0; i<mCurrentFrame.N; i++)\n ....\n 1917      KeyFrame* pKFmax= static_cast<KeyFrame*>(NULL);\n 1918  \n 1919:     // step 2：更新局部关键帧（mvpLocalKeyFrames），添加局部关键帧有三个策略\n 1920      // 先清空局部关键帧\n 1921      mvpLocalKeyFrames.clear();\n ....\n 2008  \n 2009      // V-D Kref： shares the most map points with current frame\n 2010:     // step 3：更新当前帧的参考关键帧，与自己共视程度最高的关键帧作为参考关键帧\n 2011      // 我觉得设立参考关键帧的一个目的就是，后面的各种优化过程中只会优化关键帧的位姿，那普通帧的位姿就放弃？nonono，但是更新吧我们的\n 2012      // 计算量又承担不过来，so就设立一个参考关键帧，我管你参考关键帧有没有进行优化，只要我（普通帧）保证能够和你参考关键帧的相对位姿\n ....\n 2037  {\n 2038      // Compute Bag of Words Vector\n 2039:     // Step 1： 计算当前帧特征点的Bow映射\n 2040      mCurrentFrame.ComputeBoW();\n 2041  \n 2042      // Relocalization is performed when tracking is lost\n 2043      // Track Lost: Query KeyFrame Database for keyframe candidates for relocalisation\n 2044:     // Step 2：找到与当前帧相似的候选关键帧\n 2045      vector<KeyFrame*> vpCandidateKFs = mpKeyFrameDB->DetectRelocalizationCandidates(&mCurrentFrame);\n 2046      \n ....\n 2079          else\n 2080          {\n 2081:             // Step 3：通过BoW进行匹配\n 2082              int nmatches = matcher.SearchByBoW(pKF,mCurrentFrame,vvpMapPointMatches[i]);\n 2083              //如果和当前帧的匹配数小于15,那么只能放弃这个关键帧\n ....\n 2131              bool bNoMore;\n 2132  \n 2133:             // Step 4：通过EPnP算法估计姿态\n 2134              PnPsolver* pSolver = vpPnPsolvers[i];\n 2135              cv::Mat Tcw = pSolver->iterate(5,bNoMore,vbInliers,nInliers);\n ....\n 2164                  }\n 2165  \n 2166:                 // Step 5：通过PoseOptimization对姿态进行优化求解\n 2167                  //只优化位姿,不优化地图点的坐标;返回的是内点的数量\n 2168                  int nGood = Optimizer::PoseOptimization(&mCurrentFrame);\n ....\n 2178  \n 2179                  // If few inliers, search by projection in a coarse window and optimize again\n 2180:                 // Step 6：如果内点较少，则通过投影的方式对之前未匹配的点进行匹配，再进行优化求解\n 2181                  // 前面的匹配关系是用词袋匹配过程得到的\n 2182                  if(nGood<50)\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/src/Viewer.cc:\n  136          glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n  137  \n  138:         // step1：得到最新的相机位姿\n  139          mpMapDrawer->GetCurrentOpenGLCameraMatrix(Twc);\n  140  \n  141:         // step2：根据相机的位姿调整视角\n  142          // menuFollowCamera为按钮的状态，bFollow为真实的状态\n  143          if(menuFollowCamera && bFollow)\n  ...\n  173  \n  174          d_cam.Activate(s_cam);\n  175:         // step 3：绘制地图和图像(3D部分)\n  176          // 设置为白色，glClearColor(red, green, blue, alpha），数值范围(0, 1)\n  177          glClearColor(1.0f,1.0f,1.0f,1.0f);\n  ...\n  187          pangolin::FinishFrame();\n  188  \n  189:         // step 4:绘制当前帧图像和特征点提取匹配结果\n  190          cv::Mat im = mpFrameDrawer->DrawFrame();\n  191          cv::imshow(\"ORB-SLAM2: Current Frame\",im);\n  ...\n  193          cv::waitKey(mT);\n  194  \n  195:         // step 5 相应其他请求\n  196          //复位按钮\n  197          if(menuReset)\n\n/home/zmy/project_ws/ORBSLAM2_detailed_comments/Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.cpp:\n  189        double rho = nonLinearGain / linearGain;\n  190        //cerr << PVAR(nonLinearGain) << \" \" << PVAR(linearGain) << \" \" << PVAR(rho) << endl;\n  191:       if (rho > 0) { // step is good and will be accepted\n  192          _optimizer->discardTop();\n  193          goodStep = true;\n\n406 matches across 17 files\n",
			"settings":
			{
				"buffer_size": 101027,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nDoxyDoxygen (evolution)\n-----------------------\n\n  DoxyDoxygen install\n  -------------------\n  \n  Thanks for installing this package\n  \n  It is highly recommended to restart Sublime Text before first use.\n  ------------------------------------------------------------------\n  \n  Simplified usage instructions\n  =============================\n  \n      - '/**' + 'Enter' to generate documentation of the following definition\n      - 'Alt' + 'Q' to generate documentation of the nearest definition\n      - 'Alt' + 'Q' to wrap and/or update existing documentation\n      - 'Eol' to goto next column\n      - 'Ctrl' + 'Space' to insert snippets\n      - 'Ctrl' + 'Shift' + '[' to fold comments\n      - 'Ctrl' + 'Shift' + ']' to unfold comments\n  \n  More commands and a short tutorial may be found from the palette.\n  \n  \n  Licensing\n  =========\n  \n  If you like DoxyDoxygen, please support development by buying a license. It doesn't cost much! :)\n  \n  \n  More information\n  ================\n  \n  For more information, troubleshooting, customizing settings and more, please visit https://github.com/20Tauri/DoxyDoxygen\n",
			"settings":
			{
				"buffer_size": 1161,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "Examples/ROS/Stereo/stereo_euroc.cc",
			"settings":
			{
				"buffer_size": 7994,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Examples/ROS/Stereo/stereo_kitti.cc",
			"settings":
			{
				"buffer_size": 4999,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DBoW2/BowVector.cpp",
			"settings":
			{
				"buffer_size": 2752,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DBoW2/FClass.h",
			"settings":
			{
				"buffer_size": 1647,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DBoW2/BowVector.h",
			"settings":
			{
				"buffer_size": 1886,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DBoW2/FeatureVector.h",
			"settings":
			{
				"buffer_size": 1080,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DBoW2/FeatureVector.cpp",
			"settings":
			{
				"buffer_size": 1831,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DBoW2/FORB.h",
			"settings":
			{
				"buffer_size": 1676,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DBoW2/FORB.cpp",
			"settings":
			{
				"buffer_size": 4409,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DBoW2/ScoringObject.h",
			"settings":
			{
				"buffer_size": 2449,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DBoW2/ScoringObject.cpp",
			"settings":
			{
				"buffer_size": 7890,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DUtils/config.h",
			"settings":
			{
				"buffer_size": 278,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DUtils/Random.h",
			"settings":
			{
				"buffer_size": 3774,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DUtils/Random.cpp",
			"settings":
			{
				"buffer_size": 2757,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DUtils/Timestamp.h",
			"settings":
			{
				"buffer_size": 4567,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/DBoW2/DUtils/Timestamp.cpp",
			"settings":
			{
				"buffer_size": 4871,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/base_binary_edge.h",
			"settings":
			{
				"buffer_size": 4621,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/base_binary_edge.hpp",
			"settings":
			{
				"buffer_size": 7868,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/base_edge.h",
			"settings":
			{
				"buffer_size": 3912,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/base_multi_edge.h",
			"settings":
			{
				"buffer_size": 3921,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/base_multi_edge.hpp",
			"settings":
			{
				"buffer_size": 7378,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/base_unary_edge.h",
			"settings":
			{
				"buffer_size": 3603,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/base_unary_edge.hpp",
			"settings":
			{
				"buffer_size": 4571,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/base_vertex.h",
			"settings":
			{
				"buffer_size": 4545,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/base_vertex.hpp",
			"settings":
			{
				"buffer_size": 2152,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/batch_stats.h",
			"settings":
			{
				"buffer_size": 3782,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/batch_stats.cpp",
			"settings":
			{
				"buffer_size": 3360,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/block_solver.h",
			"settings":
			{
				"buffer_size": 7527,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/block_solver.hpp",
			"settings":
			{
				"buffer_size": 22001,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/cache.h",
			"settings":
			{
				"buffer_size": 4952,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/cache.cpp",
			"settings":
			{
				"buffer_size": 5242,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/creators.h",
			"settings":
			{
				"buffer_size": 2656,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/eigen_types.h",
			"settings":
			{
				"buffer_size": 4167,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/estimate_propagator.h",
			"settings":
			{
				"buffer_size": 6395,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/estimate_propagator.cpp",
			"settings":
			{
				"buffer_size": 10141,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/factory.h",
			"settings":
			{
				"buffer_size": 5930,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/factory.cpp",
			"settings":
			{
				"buffer_size": 6420,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/hyper_dijkstra.h",
			"settings":
			{
				"buffer_size": 4579,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp",
			"settings":
			{
				"buffer_size": 9489,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/hyper_graph.h",
			"settings":
			{
				"buffer_size": 8135,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/hyper_graph.cpp",
			"settings":
			{
				"buffer_size": 4368,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/hyper_graph_action.h",
			"settings":
			{
				"buffer_size": 7930,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/hyper_graph_action.cpp",
			"settings":
			{
				"buffer_size": 8960,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/jacobian_workspace.h",
			"settings":
			{
				"buffer_size": 3321,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/jacobian_workspace.cpp",
			"settings":
			{
				"buffer_size": 3376,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/linear_solver.h",
			"settings":
			{
				"buffer_size": 3811,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h",
			"settings":
			{
				"buffer_size": 4172,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp",
			"settings":
			{
				"buffer_size": 7345,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/matrix_operations.h",
			"settings":
			{
				"buffer_size": 3358,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/matrix_structure.h",
			"settings":
			{
				"buffer_size": 2581,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/matrix_structure.cpp",
			"settings":
			{
				"buffer_size": 3566,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/openmp_mutex.h",
			"settings":
			{
				"buffer_size": 2916,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimizable_graph.cpp",
			"settings":
			{
				"buffer_size": 27537,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimizable_graph.h",
			"settings":
			{
				"buffer_size": 25597,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm.cpp",
			"settings":
			{
				"buffer_size": 2283,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm.h",
			"settings":
			{
				"buffer_size": 4355,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.cpp",
			"settings":
			{
				"buffer_size": 8625,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h",
			"settings":
			{
				"buffer_size": 3493,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp",
			"settings":
			{
				"buffer_size": 4892,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h",
			"settings":
			{
				"buffer_size": 6192,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.cpp",
			"settings":
			{
				"buffer_size": 3491,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.h",
			"settings":
			{
				"buffer_size": 2177,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.cpp",
			"settings":
			{
				"buffer_size": 6704,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h",
			"settings":
			{
				"buffer_size": 3815,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_property.h",
			"settings":
			{
				"buffer_size": 2593,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.h",
			"settings":
			{
				"buffer_size": 2731,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.cpp",
			"settings":
			{
				"buffer_size": 3537,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/parameter.h",
			"settings":
			{
				"buffer_size": 2166,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/parameter.cpp",
			"settings":
			{
				"buffer_size": 1587,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/parameter_container.h",
			"settings":
			{
				"buffer_size": 2827,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/parameter_container.cpp",
			"settings":
			{
				"buffer_size": 4459,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/robust_kernel.h",
			"settings":
			{
				"buffer_size": 2835,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/robust_kernel.cpp",
			"settings":
			{
				"buffer_size": 1670,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/robust_kernel_factory.h",
			"settings":
			{
				"buffer_size": 4749,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp",
			"settings":
			{
				"buffer_size": 3401,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/robust_kernel_impl.h",
			"settings":
			{
				"buffer_size": 4678,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp",
			"settings":
			{
				"buffer_size": 4973,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/solver.cpp",
			"settings":
			{
				"buffer_size": 2610,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/solver.h",
			"settings":
			{
				"buffer_size": 5444,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/sparse_block_matrix.h",
			"settings":
			{
				"buffer_size": 9514,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp",
			"settings":
			{
				"buffer_size": 25490,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h",
			"settings":
			{
				"buffer_size": 10801,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h",
			"settings":
			{
				"buffer_size": 4184,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/sparse_block_matrix_test.cpp",
			"settings":
			{
				"buffer_size": 3192,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/sparse_optimizer.h",
			"settings":
			{
				"buffer_size": 12602,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Thirdparty/g2o/g2o/core/sparse_optimizer.cpp",
			"settings":
			{
				"buffer_size": 20717,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"sublimelinter",
				"SublimeLinter: Show All Errors"
			],
			[
				"INSTA",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 185.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/zmy/project_ws/ORBSLAM2_detailed_comments"
	],
	"file_history":
	[
		"/home/zmy/project_ws/ORB-SLAM2/src/Initializer.cpp",
		"/home/zmy/Downloads/imu_tk-master/src/calibration.cpp",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_yaml_parser.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_viz3d.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_video_saver.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_vecutils.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_time_buffer.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_transform.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_tictoc.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_syslog.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_strutils.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_stereo_calib.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_stdout.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_singleton.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_shape_detect.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_rot.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_raycast.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_rater.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_random.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_pnp.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_pf.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_performance.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_perf.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_pca.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_os.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_numeric.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_mapping.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_line_match.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_kdtree.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_lane_detect.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_improc.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_gridmap2d.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_geometry3d.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_geometry2d.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_fileutils.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_exposure.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_debug_draw.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_debug.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_data_struct.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_data_saver.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_data_buffer.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_cv_convert.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_common.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_color_lut.hpp",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_color_filter.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_cam_odom_calib.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_cam_capture.h",
		"/home/zmy/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-03/vs_common_lib/vs_common/vs_calib.h",
		"/home/zmy/project_ws/ucoslam-1.0.8/CMakeLists.txt",
		"/home/zmy/project_ws/ORB-SLAM2/Examples/ROS/ORB_SLAM2/src/ros_stereo.cc",
		"/home/zmy/project_ws/ORB-SLAM2/include/System.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/System.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/Vocabulary/bin_vocabulary.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/Tracking.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/Tracking.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/Frame.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/Frame.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/MapPoint.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/MapPoint.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/ORBextractor.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/ORBextractor.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/KeyFrame.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/KeyFrame.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/LoopClosing.h",
		"/home/zmy/project_ws/ORB-SLAM2/include/Map.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/Map.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/LocalMapping.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/LocalMapping.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/MapDrawer.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/MapDrawer.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/FrameDrawer.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/FrameDrawer.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/ORBmatcher.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/ORBmatcher.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/Optimizer.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/Optimizer.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/include/PnPsolver.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/PnPsolver.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h",
		"/home/zmy/project_ws/ORB-SLAM2/include/ORBVocabulary.h",
		"/home/zmy/project_ws/ORB-SLAM2/include/Initializer.h",
		"/home/zmy/project_ws/ORB-SLAM2/include/KeyFrameDatabase.h",
		"/home/zmy/project_ws/ORB-SLAM2/src/Sim3Solver.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/src/Viewer.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/src/Converter.cpp",
		"/home/zmy/project_ws/ceres_pose_graph/CMakeLists.txt",
		"/home/zmy/project_ws/covariance_estimate/Jacobian/CMakeLists.txt",
		"/home/zmy/project_ws/ORB-SLAM2/src/KeyFrameDatabase.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/src/LoopClosing.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DBoW2/FeatureVector.h",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DBoW2/FeatureVector.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DBoW2/FORB.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DBoW2/FORB.h",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DBoW2/ScoringObject.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DBoW2/ScoringObject.h",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DBoW2/BowVector.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DBoW2/BowVector.h",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DBoW2/FClass.h",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DUtils/Random.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DUtils/Random.h",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DUtils/Timestamp.cpp",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DUtils/Timestamp.h",
		"/home/zmy/project_ws/ORB-SLAM2/Thirdparty/DBoW2/DUtils/config.h",
		"/home/zmy/project_ws/ORB-SLAM2/include/Sim3Solver.h",
		"/home/zmy/project_ws/ORB-SLAM2/include/Viewer.h",
		"/home/zmy/project_ws/ORB-SLAM2/include/Converter.h",
		"/home/zmy/project_ws/demo_qrocde/CMakeLists.txt",
		"/home/zmy/.cache/.fr-resKsm/sf_mobile_robot/CMakeLists.txt",
		"/home/zmy/Downloads/vs_common-master/CMakeLists.txt",
		"/home/zmy/Downloads/opencv-3.3.1/CMakeLists.txt",
		"/home/zmy/Downloads/opencv-3.3.1/3rdparty/ippicv/ippicv.cmake",
		"/D/Documents/WeChat Files/wxid_4634576346312/FileStorage/File/2020-02/slam/slam/1213/2018-2-10_sf_office.2d",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/README.md",
		"/C/Users/Administrator/Desktop/sf_matcher_ws/sf_matcher_ws/src/slam_gmapping/gmapping/launch/slam_gmapping_pr2.launch",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/Examples/ROS/ORB_SLAM2/src/ros_stereo.cc",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/include/Converter.h",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/include/Frame.h",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/include/FrameDrawer.h",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/include/Initializer.h",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/include/KeyFrame.h",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/include/LocalMapping.h",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/include/KeyFrameDatabase.h",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/include/LoopClosing.h",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/include/Map.h",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/src/MapPoint.cpp",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/src/Optimizer.cpp",
		"/C/Users/Administrator/Desktop/ORB-SLAM2/src/ORBextractor.cpp"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 139.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"mpVoc",
			"// step",
			"//step",
			"//?",
			"mnBestInliers",
			"mnInliersi",
			"mvnMaxError2",
			"mvP1im1",
			"mR12i",
			"///",
			"RunGlobalBundleAdjustment",
			"GlobalBundleAdjustemnt",
			"RunGlobalBundleAdjustment",
			"Fuse",
			"vpMapPointMatches",
			"mpKeyFrameDB->add",
			"mpKeyFrameDB",
			"mpKeyFrameDB->add",
			"mpKeyFrameDB",
			"fixed",
			"CheckFinish",
			"RunGlobalBundleAdjustment",
			"mbStopGBA",
			"mnFullBAIdx",
			"mTcwGBA",
			"nLoopKF",
			"vbNotIncludedMP",
			"RunGlobalBundleAdjustment",
			"_forceStopFlag",
			"setForceStopFlag",
			"BundleAdjustment",
			"RunGlobalBundleAdjustment",
			"OptimizeEssentialGraph",
			"RunGlobalBundleAdjustment",
			"mnCorrectedReference",
			"vpMPs",
			"mspLoopEdges",
			"minFeat",
			"vpVertices",
			"mpMatchedKF",
			"OptimizeEssentialGraph",
			"vpReplacePoint",
			"th",
			"Fuse",
			"RunGlobalBundleAdjustment",
			"mnCorrectedReference",
			"r",
			"mvpMapPoints",
			"stopRequested",
			"mbStopRequested",
			"mpThreadGBA",
			"mnFullBAIdx",
			"stopRequested",
			"mbStopRequested",
			"mbRunningGBA",
			"mpLocalMapper",
			"mScw",
			"mvpCurrentMatchedPoints",
			"mScw",
			"sRcw",
			"mvpCurrentMatchedPoints",
			"SearchByProjection",
			"mnLoopPointForKF",
			"mvpCurrentMatchedPoints",
			"mbFixScale",
			"mpCurrentKF",
			"SearchBySim3",
			"ComputeSim3",
			"mvAllIndices",
			"nIterations",
			"mvX3Dc2",
			"mBestRotation",
			"mRansacMinInliers",
			"mRansacProb",
			"mvP1im1",
			"mK1",
			"mvnIndices1",
			"vpMapPoints2",
			"SearchByBoW",
			"mvpMapPoints1",
			"mpKF1",
			"mbFixScale",
			"mvpCurrentMatchedPoints",
			"bConsistentForSomeGroup",
			"mvpEnoughConsistentCandidates",
			"mvConsistentGroups",
			"vCurrentConsistentGroups",
			"spCandidateGroup",
			"mvpEnoughConsistentCandidates",
			"mvConsistentGroups",
			"score",
			"mpKeyFrameDB",
			"mbToBeErased",
			"mspLoopEdges",
			"mLastLoopKFid",
			"mlpLoopKeyFrameQueue",
			"mTcp",
			"mpParent",
			"mbNotErase",
			"RunGlobalBundleAdjustment",
			"lLocalMapPoints",
			"maxKFid",
			"mnBALocalForKF",
			"mpMap",
			"mspKeyFrames",
			"mpReplaced",
			"mnFuseTargetForKF",
			"mbMonocular",
			"nnew",
			"ratioFactor",
			"mvLevelSigma2",
			"Tcw1",
			"bOnlyStereo",
			"Ow",
			"mTrackedMapPoints",
			"mTrackingState",
			"mlpReferences",
			"mbActivateLocalizationMode",
			"mbReset",
			"ComputeDistinctiveDescriptors",
			"mvpMapPoints",
			"AddObservation",
			"mbStopped",
			"mlNewKeyFrames",
			"mbAbortBA",
			"mnMatchesInliers",
			"nRefMatches",
			"mMinFrames"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/home/zmy/project_ws/ORBSLAM2_detailed_comments"
		}
	],
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Examples/ROS/ORB_SLAM2/src/ros_stereo.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5349,
						"regions":
						{
						},
						"selection":
						[
							[
								4252,
								4252
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4256,
										4257
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										4223,
										4224
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1910.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "include/System.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7790,
						"regions":
						{
						},
						"selection":
						[
							[
								4056,
								4056
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										7743,
										7744
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1428,
										1429
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2377.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/System.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19204,
						"regions":
						{
						},
						"selection":
						[
							[
								3631,
								3596
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3831,
										3832
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										3481,
										3482
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 256.0,
						"translation.y": 1914.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Examples/ROS/ORB_SLAM2/src/ros_mono.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2463,
						"regions":
						{
						},
						"selection":
						[
							[
								1892,
								1892
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2044,
										2045
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1266,
										1267
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 815.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "include/ORBVocabulary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1328,
						"regions":
						{
						},
						"selection":
						[
							[
								192,
								192
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 396.0,
						"zoom_level": 1.0
					},
					"stack_index": 134,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "include/KeyFrameDatabase.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2557,
						"regions":
						{
						},
						"selection":
						[
							[
								1746,
								1746
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2522,
										2523
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1298,
										1299
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1518.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/KeyFrameDatabase.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12790,
						"regions":
						{
						},
						"selection":
						[
							[
								10063,
								10063
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										10074,
										10075
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										9971,
										9972
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6256.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "include/Tracking.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11015,
						"regions":
						{
						},
						"selection":
						[
							[
								5701,
								5701
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										10948,
										10949
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1576,
										1577
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1663.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/Tracking.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 75658,
						"regions":
						{
						},
						"selection":
						[
							[
								3343,
								3343
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										6829,
										6830
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										2784,
										2785
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1369.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "include/Map.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3890,
						"regions":
						{
						},
						"selection":
						[
							[
								1723,
								1723
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3846,
										3847
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1181,
										1182
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1276.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Map.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4021,
						"regions":
						{
						},
						"selection":
						[
							[
								1983,
								1983
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3998,
										3999
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1041,
										1042
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1408.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "include/MapDrawer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2592,
						"regions":
						{
						},
						"selection":
						[
							[
								2497,
								2497
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2542,
										2543
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1176,
										1177
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1718.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/MapDrawer.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9270,
						"regions":
						{
						},
						"selection":
						[
							[
								8236,
								8236
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										8252,
										8253
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										8176,
										8177
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5031.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "include/ORBextractor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6631,
						"regions":
						{
						},
						"selection":
						[
							[
								1811,
								1811
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										6599,
										6600
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										985,
										986
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1127.0,
						"zoom_level": 1.0
					},
					"stack_index": 132,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/ORBextractor.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 66175,
						"regions":
						{
						},
						"selection":
						[
							[
								176,
								176
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8835.0,
						"zoom_level": 1.0
					},
					"stack_index": 133,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "include/LocalMapping.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5583,
						"regions":
						{
						},
						"selection":
						[
							[
								2042,
								2042
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5529,
										5530
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1290,
										1291
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1460.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/LocalMapping.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34765,
						"regions":
						{
						},
						"selection":
						[
							[
								3829,
								3829
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3865,
										3866
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										3829,
										3830
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2032.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "include/LoopClosing.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7148,
						"regions":
						{
						},
						"selection":
						[
							[
								6440,
								6440
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										7096,
										7097
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1412,
										1413
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4012.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/LoopClosing.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39280,
						"regions":
						{
						},
						"selection":
						[
							[
								11455,
								11455
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										39257,
										39258
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1173,
										1174
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8170.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "Thirdparty/g2o/g2o/types/sim3.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6948,
						"regions":
						{
						},
						"selection":
						[
							[
								1766,
								1766
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1816,
										1817
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1757,
										1758
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 264.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "include/Frame.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15127,
						"regions":
						{
						},
						"selection":
						[
							[
								5057,
								5057
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										15081,
										15082
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1482,
										1483
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2883.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src/Frame.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40019,
						"regions":
						{
						},
						"selection":
						[
							[
								14872,
								14872
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										16485,
										16486
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										14630,
										14631
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8261.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "include/KeyFrame.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12778,
						"regions":
						{
						},
						"selection":
						[
							[
								9540,
								9540
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										12729,
										12730
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1466,
										1467
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 423.0,
						"translation.y": 7048.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/KeyFrame.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25973,
						"regions":
						{
						},
						"selection":
						[
							[
								16512,
								16512
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										16514,
										16515
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										16436,
										16437
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11866.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "include/Converter.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4902,
						"regions":
						{
						},
						"selection":
						[
							[
								2111,
								2111
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4852,
										4853
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1467,
										1468
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1148.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "src/Converter.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5464,
						"regions":
						{
						},
						"selection":
						[
							[
								3762,
								3762
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3761,
										3762
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										3745,
										3746
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2728.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "Thirdparty/g2o/g2o/types/se3quat.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8168,
						"regions":
						{
						},
						"selection":
						[
							[
								1650,
								1650
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										8141,
										8142
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1530,
										1531
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1668.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "include/FrameDrawer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2639,
						"regions":
						{
						},
						"selection":
						[
							[
								2056,
								2056
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2587,
										2588
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1269,
										1270
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1376.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "src/FrameDrawer.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8353,
						"regions":
						{
						},
						"selection":
						[
							[
								8191,
								8191
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										8193,
										8194
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/square_bracket.png",
										"region.bluish"
									]
								},
								"open":
								{
									"1":
									[
										8191,
										8192
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4039.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "include/Viewer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3259,
						"regions":
						{
						},
						"selection":
						[
							[
								166,
								166
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 130,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "src/Viewer.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8548,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 131,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "Thirdparty/DBoW2/DBoW2/TemplatedVocabulary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42480,
						"regions":
						{
						},
						"selection":
						[
							[
								31499,
								31499
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										31542,
										31543
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										31498,
										31499
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 25828.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "include/MapPoint.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8998,
						"regions":
						{
						},
						"selection":
						[
							[
								3919,
								3919
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										8949,
										8950
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1244,
										1245
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2714.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "src/MapPoint.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17004,
						"regions":
						{
						},
						"selection":
						[
							[
								9228,
								9228
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										9391,
										9392
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										7661,
										7662
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4958.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "include/ORBmatcher.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9924,
						"regions":
						{
						},
						"selection":
						[
							[
								7465,
								7465
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										7608,
										7609
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										7465,
										7466
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3660.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "src/ORBmatcher.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64286,
						"regions":
						{
						},
						"selection":
						[
							[
								40257,
								40257
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										64263,
										64264
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1230,
										1231
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26496.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "include/Optimizer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6939,
						"regions":
						{
						},
						"selection":
						[
							[
								2689,
								2689
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										6889,
										6890
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1339,
										1340
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1350.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "src/Optimizer.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 55484,
						"regions":
						{
						},
						"selection":
						[
							[
								25788,
								25788
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										25898,
										25899
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										25549,
										25550
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15628.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "Thirdparty/g2o/g2o/types/types_sba.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2045,
						"regions":
						{
						},
						"selection":
						[
							[
								1578,
								1578
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2005,
										2006
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1540,
										1541
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 462.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "Thirdparty/g2o/g2o/types/types_sba.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1905,
						"regions":
						{
						},
						"selection":
						[
							[
								1459,
								1459
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1886,
										1887
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1458,
										1459
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 132.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5634,
						"regions":
						{
						},
						"selection":
						[
							[
								3437,
								3437
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4301,
										4302
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										3275,
										3276
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1651.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "Thirdparty/g2o/g2o/types/types_six_dof_expmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6116,
						"regions":
						{
						},
						"selection":
						[
							[
								4615,
								4615
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										6089,
										6090
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										2076,
										2077
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2637.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "include/Initializer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12021,
						"regions":
						{
						},
						"selection":
						[
							[
								11967,
								11967
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										11969,
										11970
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1286,
										1287
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6336.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "src/Initializer.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 55325,
						"regions":
						{
						},
						"selection":
						[
							[
								51373,
								51373
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										51414,
										51415
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										51369,
										51370
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 35164.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "include/PnPsolver.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14611,
						"regions":
						{
						},
						"selection":
						[
							[
								4314,
								4314
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										14562,
										14563
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										2889,
										2890
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2142.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "src/PnPsolver.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47158,
						"regions":
						{
						},
						"selection":
						[
							[
								22154,
								22154
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										47135,
										47136
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										4032,
										4033
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14242.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "include/Sim3Solver.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7599,
						"regions":
						{
						},
						"selection":
						[
							[
								5787,
								5787
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										7548,
										7549
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1174,
										1175
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3572.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "src/Sim3Solver.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16439,
						"regions":
						{
						},
						"selection":
						[
							[
								7953,
								7953
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										8813,
										8814
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										7135,
										7136
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5068.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 48,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 101027,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										327,
										330
									],
									[
										586,
										589
									],
									[
										784,
										787
									],
									[
										980,
										983
									],
									[
										1006,
										1009
									],
									[
										1305,
										1308
									],
									[
										1614,
										1617
									],
									[
										1861,
										1864
									],
									[
										2035,
										2038
									],
									[
										2202,
										2205
									],
									[
										2367,
										2370
									],
									[
										2418,
										2421
									],
									[
										2545,
										2548
									],
									[
										2670,
										2673
									],
									[
										2730,
										2733
									],
									[
										2790,
										2793
									],
									[
										2880,
										2883
									],
									[
										3159,
										3162
									],
									[
										3474,
										3477
									],
									[
										3554,
										3557
									],
									[
										3784,
										3787
									],
									[
										3996,
										3999
									],
									[
										4082,
										4085
									],
									[
										4234,
										4237
									],
									[
										4456,
										4459
									],
									[
										4565,
										4568
									],
									[
										4813,
										4816
									],
									[
										5200,
										5203
									],
									[
										5277,
										5280
									],
									[
										5630,
										5633
									],
									[
										5703,
										5706
									],
									[
										5939,
										5942
									],
									[
										6109,
										6112
									],
									[
										6321,
										6324
									],
									[
										6479,
										6482
									],
									[
										6568,
										6571
									],
									[
										6711,
										6714
									],
									[
										6859,
										6862
									],
									[
										6982,
										6985
									],
									[
										7213,
										7216
									],
									[
										7421,
										7424
									],
									[
										7478,
										7481
									],
									[
										7762,
										7765
									],
									[
										8114,
										8117
									],
									[
										8344,
										8347
									],
									[
										8840,
										8843
									],
									[
										9091,
										9094
									],
									[
										9355,
										9358
									],
									[
										9655,
										9658
									],
									[
										9944,
										9947
									],
									[
										10302,
										10305
									],
									[
										10617,
										10620
									],
									[
										10895,
										10898
									],
									[
										11156,
										11159
									],
									[
										11211,
										11214
									],
									[
										11266,
										11269
									],
									[
										11321,
										11324
									],
									[
										11376,
										11379
									],
									[
										11431,
										11434
									],
									[
										11487,
										11490
									],
									[
										11807,
										11810
									],
									[
										12047,
										12050
									],
									[
										12304,
										12307
									],
									[
										12556,
										12559
									],
									[
										12847,
										12850
									],
									[
										13027,
										13030
									],
									[
										13407,
										13410
									],
									[
										13619,
										13622
									],
									[
										13909,
										13912
									],
									[
										14106,
										14109
									],
									[
										14363,
										14366
									],
									[
										14519,
										14522
									],
									[
										14787,
										14790
									],
									[
										15068,
										15071
									],
									[
										15426,
										15429
									],
									[
										15676,
										15679
									],
									[
										15746,
										15749
									],
									[
										15854,
										15857
									],
									[
										16005,
										16008
									],
									[
										16245,
										16248
									],
									[
										16284,
										16287
									],
									[
										16602,
										16605
									],
									[
										16897,
										16900
									],
									[
										17152,
										17155
									],
									[
										17527,
										17530
									],
									[
										17878,
										17881
									],
									[
										18123,
										18126
									],
									[
										18165,
										18168
									],
									[
										18452,
										18455
									],
									[
										18668,
										18671
									],
									[
										18965,
										18968
									],
									[
										19160,
										19163
									],
									[
										19379,
										19382
									],
									[
										19636,
										19639
									],
									[
										19844,
										19847
									],
									[
										20085,
										20088
									],
									[
										20233,
										20236
									],
									[
										20494,
										20497
									],
									[
										20750,
										20753
									],
									[
										20962,
										20965
									],
									[
										21176,
										21179
									],
									[
										21354,
										21357
									],
									[
										21514,
										21517
									],
									[
										21693,
										21696
									],
									[
										21873,
										21876
									],
									[
										22099,
										22102
									],
									[
										22183,
										22186
									],
									[
										22304,
										22307
									],
									[
										22686,
										22689
									],
									[
										23031,
										23038
									],
									[
										23130,
										23137
									],
									[
										23250,
										23257
									],
									[
										23494,
										23501
									],
									[
										23645,
										23652
									],
									[
										23802,
										23809
									],
									[
										23998,
										24005
									],
									[
										24112,
										24119
									],
									[
										24332,
										24339
									],
									[
										24421,
										24428
									],
									[
										24571,
										24578
									],
									[
										24743,
										24750
									],
									[
										24897,
										24904
									],
									[
										25064,
										25071
									],
									[
										25442,
										25449
									],
									[
										25596,
										25603
									],
									[
										25850,
										25857
									],
									[
										25941,
										25948
									],
									[
										26073,
										26080
									],
									[
										26332,
										26339
									],
									[
										26429,
										26436
									],
									[
										26640,
										26647
									],
									[
										26865,
										26872
									],
									[
										27072,
										27079
									],
									[
										27209,
										27216
									],
									[
										27313,
										27320
									],
									[
										27455,
										27462
									],
									[
										27583,
										27590
									],
									[
										27724,
										27731
									],
									[
										27891,
										27898
									],
									[
										28130,
										28137
									],
									[
										28194,
										28201
									],
									[
										28351,
										28358
									],
									[
										28558,
										28565
									],
									[
										28704,
										28711
									],
									[
										28979,
										28986
									],
									[
										29043,
										29050
									],
									[
										29197,
										29204
									],
									[
										29321,
										29328
									],
									[
										29408,
										29415
									],
									[
										29547,
										29554
									],
									[
										29611,
										29618
									],
									[
										29736,
										29743
									],
									[
										29867,
										29874
									],
									[
										30015,
										30022
									],
									[
										30216,
										30223
									],
									[
										30370,
										30377
									],
									[
										30620,
										30627
									],
									[
										30805,
										30812
									],
									[
										31008,
										31015
									],
									[
										31212,
										31219
									],
									[
										31348,
										31355
									],
									[
										31489,
										31496
									],
									[
										31740,
										31747
									],
									[
										31947,
										31954
									],
									[
										32104,
										32111
									],
									[
										32376,
										32383
									],
									[
										32533,
										32540
									],
									[
										32819,
										32826
									],
									[
										32972,
										32979
									],
									[
										33021,
										33028
									],
									[
										33245,
										33252
									],
									[
										33470,
										33477
									],
									[
										33739,
										33746
									],
									[
										33979,
										33986
									],
									[
										34154,
										34161
									],
									[
										34364,
										34371
									],
									[
										34587,
										34594
									],
									[
										34730,
										34737
									],
									[
										34944,
										34951
									],
									[
										35151,
										35158
									],
									[
										35313,
										35320
									],
									[
										35542,
										35549
									],
									[
										35670,
										35677
									],
									[
										35813,
										35820
									],
									[
										35942,
										35949
									],
									[
										36092,
										36099
									],
									[
										36288,
										36295
									],
									[
										36489,
										36496
									],
									[
										36658,
										36665
									],
									[
										36828,
										36835
									],
									[
										36972,
										36979
									],
									[
										37230,
										37237
									],
									[
										37470,
										37477
									],
									[
										37755,
										37762
									],
									[
										37983,
										37990
									],
									[
										38119,
										38126
									],
									[
										38290,
										38297
									],
									[
										38549,
										38556
									],
									[
										38716,
										38723
									],
									[
										38862,
										38869
									],
									[
										39043,
										39050
									],
									[
										39215,
										39222
									],
									[
										39393,
										39400
									],
									[
										39575,
										39582
									],
									[
										39805,
										39812
									],
									[
										40086,
										40093
									],
									[
										40221,
										40228
									],
									[
										40418,
										40425
									],
									[
										40611,
										40618
									],
									[
										40819,
										40826
									],
									[
										41002,
										41009
									],
									[
										41197,
										41204
									],
									[
										41417,
										41424
									],
									[
										41577,
										41584
									],
									[
										41732,
										41739
									],
									[
										41933,
										41940
									],
									[
										42215,
										42222
									],
									[
										42470,
										42477
									],
									[
										42687,
										42694
									],
									[
										42941,
										42948
									],
									[
										43123,
										43130
									],
									[
										43272,
										43279
									],
									[
										43458,
										43465
									],
									[
										43721,
										43728
									],
									[
										43913,
										43920
									],
									[
										44062,
										44069
									],
									[
										44366,
										44373
									],
									[
										44644,
										44651
									],
									[
										44890,
										44897
									],
									[
										45126,
										45133
									],
									[
										45405,
										45412
									],
									[
										45567,
										45574
									],
									[
										45707,
										45714
									],
									[
										45891,
										45898
									],
									[
										46102,
										46109
									],
									[
										46244,
										46251
									],
									[
										46608,
										46615
									],
									[
										46870,
										46877
									],
									[
										47133,
										47140
									],
									[
										47327,
										47334
									],
									[
										47561,
										47568
									],
									[
										47779,
										47786
									],
									[
										47975,
										47982
									],
									[
										48323,
										48330
									],
									[
										48590,
										48597
									],
									[
										48910,
										48917
									],
									[
										49249,
										49256
									],
									[
										49528,
										49535
									],
									[
										49753,
										49760
									],
									[
										49900,
										49907
									],
									[
										50052,
										50059
									],
									[
										50281,
										50288
									],
									[
										50473,
										50480
									],
									[
										50649,
										50656
									],
									[
										50831,
										50838
									],
									[
										51145,
										51152
									],
									[
										51385,
										51392
									],
									[
										51637,
										51644
									],
									[
										51881,
										51888
									],
									[
										52067,
										52074
									],
									[
										52227,
										52234
									],
									[
										52296,
										52303
									],
									[
										52340,
										52347
									],
									[
										52407,
										52414
									],
									[
										52487,
										52494
									],
									[
										52563,
										52570
									],
									[
										52628,
										52635
									],
									[
										52722,
										52729
									],
									[
										52770,
										52777
									],
									[
										52937,
										52944
									],
									[
										53118,
										53125
									],
									[
										53438,
										53445
									],
									[
										53693,
										53700
									],
									[
										54077,
										54084
									],
									[
										54414,
										54421
									],
									[
										54766,
										54773
									],
									[
										55023,
										55030
									],
									[
										55363,
										55370
									],
									[
										55639,
										55646
									],
									[
										55817,
										55824
									],
									[
										56044,
										56051
									],
									[
										56251,
										56258
									],
									[
										56362,
										56369
									],
									[
										56470,
										56477
									],
									[
										56783,
										56790
									],
									[
										57045,
										57052
									],
									[
										57316,
										57323
									],
									[
										57586,
										57593
									],
									[
										57844,
										57851
									],
									[
										57951,
										57958
									],
									[
										58065,
										58072
									],
									[
										58241,
										58248
									],
									[
										58477,
										58484
									],
									[
										58700,
										58707
									],
									[
										58968,
										58975
									],
									[
										59124,
										59131
									],
									[
										59198,
										59205
									],
									[
										59362,
										59369
									],
									[
										59544,
										59551
									],
									[
										59789,
										59796
									],
									[
										59951,
										59958
									],
									[
										59988,
										59995
									],
									[
										60153,
										60160
									],
									[
										60338,
										60345
									],
									[
										60522,
										60529
									],
									[
										60813,
										60820
									],
									[
										61171,
										61178
									],
									[
										61433,
										61440
									],
									[
										61573,
										61580
									],
									[
										61842,
										61849
									],
									[
										62120,
										62127
									],
									[
										62305,
										62312
									],
									[
										62500,
										62507
									],
									[
										62734,
										62741
									],
									[
										62988,
										62995
									],
									[
										63178,
										63185
									],
									[
										63443,
										63450
									],
									[
										63614,
										63621
									],
									[
										63808,
										63815
									],
									[
										63997,
										64004
									],
									[
										64190,
										64197
									],
									[
										64323,
										64330
									],
									[
										64483,
										64490
									],
									[
										64637,
										64644
									],
									[
										64927,
										64934
									],
									[
										65096,
										65103
									],
									[
										65228,
										65235
									],
									[
										65513,
										65520
									],
									[
										65731,
										65738
									],
									[
										65931,
										65938
									],
									[
										66169,
										66176
									],
									[
										66493,
										66500
									],
									[
										66632,
										66639
									],
									[
										66874,
										66881
									],
									[
										67150,
										67157
									],
									[
										67430,
										67437
									],
									[
										67554,
										67561
									],
									[
										67704,
										67711
									],
									[
										67886,
										67893
									],
									[
										68190,
										68197
									],
									[
										68376,
										68383
									],
									[
										68517,
										68524
									],
									[
										68652,
										68659
									],
									[
										68911,
										68918
									],
									[
										69032,
										69039
									],
									[
										69248,
										69255
									],
									[
										69441,
										69448
									],
									[
										69596,
										69603
									],
									[
										69667,
										69674
									],
									[
										69874,
										69881
									],
									[
										70068,
										70075
									],
									[
										70263,
										70270
									],
									[
										70546,
										70553
									],
									[
										70729,
										70736
									],
									[
										70955,
										70962
									],
									[
										71155,
										71162
									],
									[
										71357,
										71364
									],
									[
										71493,
										71500
									],
									[
										71624,
										71631
									],
									[
										71904,
										71911
									],
									[
										72084,
										72091
									],
									[
										72174,
										72181
									],
									[
										72369,
										72376
									],
									[
										72487,
										72494
									],
									[
										72619,
										72626
									],
									[
										72751,
										72758
									],
									[
										72959,
										72966
									],
									[
										73167,
										73174
									],
									[
										73467,
										73474
									],
									[
										73661,
										73668
									],
									[
										73870,
										73877
									],
									[
										74085,
										74092
									],
									[
										74328,
										74335
									],
									[
										74466,
										74473
									],
									[
										74697,
										74704
									],
									[
										74889,
										74896
									],
									[
										75013,
										75020
									],
									[
										75222,
										75229
									],
									[
										75291,
										75298
									],
									[
										75400,
										75407
									],
									[
										75642,
										75649
									],
									[
										75678,
										75685
									],
									[
										75812,
										75819
									],
									[
										75950,
										75957
									],
									[
										76220,
										76227
									],
									[
										76418,
										76425
									],
									[
										76511,
										76518
									],
									[
										76684,
										76691
									],
									[
										76970,
										76977
									],
									[
										77084,
										77091
									],
									[
										77189,
										77196
									],
									[
										77326,
										77333
									],
									[
										77492,
										77499
									],
									[
										77576,
										77583
									],
									[
										77645,
										77652
									],
									[
										77725,
										77732
									],
									[
										77796,
										77803
									],
									[
										77959,
										77966
									],
									[
										78365,
										78372
									],
									[
										78623,
										78630
									],
									[
										78753,
										78760
									],
									[
										78852,
										78859
									],
									[
										79037,
										79044
									],
									[
										79243,
										79250
									],
									[
										79385,
										79392
									],
									[
										79522,
										79529
									],
									[
										79732,
										79739
									],
									[
										79839,
										79846
									],
									[
										79945,
										79952
									],
									[
										80081,
										80088
									],
									[
										80175,
										80182
									],
									[
										80325,
										80332
									],
									[
										80539,
										80546
									],
									[
										80744,
										80751
									],
									[
										80887,
										80894
									],
									[
										81004,
										81011
									],
									[
										81180,
										81187
									],
									[
										81281,
										81288
									],
									[
										81397,
										81404
									],
									[
										81553,
										81560
									],
									[
										81670,
										81677
									],
									[
										81877,
										81884
									],
									[
										82004,
										82011
									],
									[
										82127,
										82134
									],
									[
										82257,
										82264
									],
									[
										82412,
										82419
									],
									[
										82629,
										82636
									],
									[
										82912,
										82919
									],
									[
										83154,
										83161
									],
									[
										83367,
										83374
									],
									[
										83697,
										83704
									],
									[
										84019,
										84026
									],
									[
										84272,
										84279
									],
									[
										84433,
										84440
									],
									[
										84571,
										84578
									],
									[
										84806,
										84813
									],
									[
										84956,
										84963
									],
									[
										85128,
										85135
									],
									[
										85251,
										85258
									],
									[
										85384,
										85391
									],
									[
										85591,
										85598
									],
									[
										85693,
										85700
									],
									[
										85818,
										85825
									],
									[
										86101,
										86108
									],
									[
										86262,
										86269
									],
									[
										86419,
										86426
									],
									[
										86640,
										86647
									],
									[
										86881,
										86888
									],
									[
										87090,
										87097
									],
									[
										87343,
										87350
									],
									[
										87541,
										87548
									],
									[
										87797,
										87804
									],
									[
										88047,
										88054
									],
									[
										88117,
										88124
									],
									[
										88231,
										88238
									],
									[
										88400,
										88407
									],
									[
										88569,
										88576
									],
									[
										88726,
										88733
									],
									[
										88890,
										88897
									],
									[
										89087,
										89094
									],
									[
										89238,
										89245
									],
									[
										89478,
										89485
									],
									[
										89604,
										89611
									],
									[
										89800,
										89807
									],
									[
										89947,
										89954
									],
									[
										90119,
										90126
									],
									[
										90319,
										90326
									],
									[
										90456,
										90463
									],
									[
										90659,
										90666
									],
									[
										90835,
										90842
									],
									[
										91154,
										91161
									],
									[
										91316,
										91323
									],
									[
										91545,
										91552
									],
									[
										91793,
										91800
									],
									[
										92027,
										92034
									],
									[
										92313,
										92320
									],
									[
										92434,
										92441
									],
									[
										92640,
										92647
									],
									[
										92746,
										92753
									],
									[
										92984,
										92991
									],
									[
										93168,
										93175
									],
									[
										93411,
										93418
									],
									[
										93687,
										93694
									],
									[
										93885,
										93892
									],
									[
										94105,
										94112
									],
									[
										94477,
										94484
									],
									[
										94750,
										94757
									],
									[
										94889,
										94896
									],
									[
										95004,
										95011
									],
									[
										95208,
										95215
									],
									[
										95482,
										95489
									],
									[
										95681,
										95688
									],
									[
										95791,
										95798
									],
									[
										95971,
										95978
									],
									[
										96292,
										96299
									],
									[
										96588,
										96595
									],
									[
										96752,
										96759
									],
									[
										96952,
										96959
									],
									[
										97033,
										97040
									],
									[
										97325,
										97332
									],
									[
										97614,
										97621
									],
									[
										97853,
										97860
									],
									[
										98059,
										98066
									],
									[
										98328,
										98335
									],
									[
										98569,
										98576
									],
									[
										98776,
										98783
									],
									[
										99006,
										99013
									],
									[
										99229,
										99236
									],
									[
										99536,
										99543
									],
									[
										99817,
										99824
									],
									[
										99922,
										99929
									],
									[
										100112,
										100119
									],
									[
										100328,
										100335
									],
									[
										100531,
										100538
									],
									[
										100888,
										100895
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								23668,
								23645
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										22431,
										22432
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"detect_indentation": false,
							"git_gutter_is_enabled": false,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 12804.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 49,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1161,
						"regions":
						{
						},
						"selection":
						[
							[
								574,
								574
							]
						],
						"settings":
						{
							"auto_indent": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "Examples/ROS/Stereo/stereo_euroc.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7994,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 135,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "Examples/ROS/Stereo/stereo_kitti.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4999,
						"regions":
						{
						},
						"selection":
						[
							[
								447,
								447
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 129,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "Thirdparty/DBoW2/DBoW2/BowVector.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2752,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 128,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "Thirdparty/DBoW2/DBoW2/FClass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1647,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 127,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "Thirdparty/DBoW2/DBoW2/BowVector.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1886,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 126,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "Thirdparty/DBoW2/DBoW2/FeatureVector.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1080,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 125,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "Thirdparty/DBoW2/DBoW2/FeatureVector.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1831,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 124,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "Thirdparty/DBoW2/DBoW2/FORB.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1676,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "Thirdparty/DBoW2/DBoW2/FORB.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4409,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 123,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "Thirdparty/DBoW2/DBoW2/ScoringObject.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2449,
						"regions":
						{
						},
						"selection":
						[
							[
								546,
								546
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1086,
										1087
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										340,
										341
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 66.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "Thirdparty/DBoW2/DBoW2/ScoringObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7890,
						"regions":
						{
						},
						"selection":
						[
							[
								5798,
								5798
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										6644,
										6645
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										5797,
										5798
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4450.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "Thirdparty/DBoW2/DUtils/config.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 278,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 122,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "Thirdparty/DBoW2/DUtils/Random.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3774,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "Thirdparty/DBoW2/DUtils/Random.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2757,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 121,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "Thirdparty/DBoW2/DUtils/Timestamp.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4567,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 120,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "Thirdparty/DBoW2/DUtils/Timestamp.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4871,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 119,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "Thirdparty/g2o/g2o/core/base_binary_edge.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4621,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 118,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "Thirdparty/g2o/g2o/core/base_binary_edge.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7868,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 117,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "Thirdparty/g2o/g2o/core/base_edge.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3912,
						"regions":
						{
						},
						"selection":
						[
							[
								2928,
								2928
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3877,
										3878
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1705,
										1706
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 889.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "Thirdparty/g2o/g2o/core/base_multi_edge.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3921,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 116,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "Thirdparty/g2o/g2o/core/base_multi_edge.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7378,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 115,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "Thirdparty/g2o/g2o/core/base_unary_edge.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3603,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 114,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "Thirdparty/g2o/g2o/core/base_unary_edge.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4571,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 113,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "Thirdparty/g2o/g2o/core/base_vertex.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4545,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 112,
					"type": "text"
				},
				{
					"buffer": 74,
					"file": "Thirdparty/g2o/g2o/core/base_vertex.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2152,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 111,
					"type": "text"
				},
				{
					"buffer": 75,
					"file": "Thirdparty/g2o/g2o/core/batch_stats.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3782,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 76,
					"file": "Thirdparty/g2o/g2o/core/batch_stats.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3360,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 110,
					"type": "text"
				},
				{
					"buffer": 77,
					"file": "Thirdparty/g2o/g2o/core/block_solver.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7527,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 109,
					"type": "text"
				},
				{
					"buffer": 78,
					"file": "Thirdparty/g2o/g2o/core/block_solver.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22001,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 108,
					"type": "text"
				},
				{
					"buffer": 79,
					"file": "Thirdparty/g2o/g2o/core/cache.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4952,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 80,
					"file": "Thirdparty/g2o/g2o/core/cache.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5242,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 107,
					"type": "text"
				},
				{
					"buffer": 81,
					"file": "Thirdparty/g2o/g2o/core/creators.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2656,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 106,
					"type": "text"
				},
				{
					"buffer": 82,
					"file": "Thirdparty/g2o/g2o/core/eigen_types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4167,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 105,
					"type": "text"
				},
				{
					"buffer": 83,
					"file": "Thirdparty/g2o/g2o/core/estimate_propagator.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6395,
						"regions":
						{
						},
						"selection":
						[
							[
								1523,
								1523
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1522,
										1523
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										1502,
										1503
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 198.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 84,
					"file": "Thirdparty/g2o/g2o/core/estimate_propagator.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10141,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 104,
					"type": "text"
				},
				{
					"buffer": 85,
					"file": "Thirdparty/g2o/g2o/core/factory.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5930,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 86,
					"file": "Thirdparty/g2o/g2o/core/factory.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6420,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 103,
					"type": "text"
				},
				{
					"buffer": 87,
					"file": "Thirdparty/g2o/g2o/core/hyper_dijkstra.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4579,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 88,
					"file": "Thirdparty/g2o/g2o/core/hyper_dijkstra.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9489,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 102,
					"type": "text"
				},
				{
					"buffer": 89,
					"file": "Thirdparty/g2o/g2o/core/hyper_graph.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8135,
						"regions":
						{
						},
						"selection":
						[
							[
								5509,
								5509
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5861,
										5862
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										4295,
										4296
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 202.0,
						"translation.y": 2447.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 90,
					"file": "Thirdparty/g2o/g2o/core/hyper_graph.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4368,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 101,
					"type": "text"
				},
				{
					"buffer": 91,
					"file": "Thirdparty/g2o/g2o/core/hyper_graph_action.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7930,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 92,
					"file": "Thirdparty/g2o/g2o/core/hyper_graph_action.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8960,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 100,
					"type": "text"
				},
				{
					"buffer": 93,
					"file": "Thirdparty/g2o/g2o/core/jacobian_workspace.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3321,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 94,
					"file": "Thirdparty/g2o/g2o/core/jacobian_workspace.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3376,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 99,
					"type": "text"
				},
				{
					"buffer": 95,
					"file": "Thirdparty/g2o/g2o/core/linear_solver.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3811,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 98,
					"type": "text"
				},
				{
					"buffer": 96,
					"file": "Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4172,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 97,
					"file": "Thirdparty/g2o/g2o/core/marginal_covariance_cholesky.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7345,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 97,
					"type": "text"
				},
				{
					"buffer": 98,
					"file": "Thirdparty/g2o/g2o/core/matrix_operations.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3358,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 96,
					"type": "text"
				},
				{
					"buffer": 99,
					"file": "Thirdparty/g2o/g2o/core/matrix_structure.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2581,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 100,
					"file": "Thirdparty/g2o/g2o/core/matrix_structure.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3566,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 95,
					"type": "text"
				},
				{
					"buffer": 101,
					"file": "Thirdparty/g2o/g2o/core/openmp_mutex.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2916,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 94,
					"type": "text"
				},
				{
					"buffer": 102,
					"file": "Thirdparty/g2o/g2o/core/optimizable_graph.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27537,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 93,
					"type": "text"
				},
				{
					"buffer": 103,
					"file": "Thirdparty/g2o/g2o/core/optimizable_graph.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25597,
						"regions":
						{
						},
						"selection":
						[
							[
								17078,
								17078
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										19146,
										19147
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										13206,
										13207
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8546.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 104,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2283,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 92,
					"type": "text"
				},
				{
					"buffer": 105,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4355,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 91,
					"type": "text"
				},
				{
					"buffer": 106,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8625,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 90,
					"type": "text"
				},
				{
					"buffer": 107,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_dogleg.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3493,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 89,
					"type": "text"
				},
				{
					"buffer": 108,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_factory.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4892,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 88,
					"type": "text"
				},
				{
					"buffer": 109,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_factory.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6192,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 87,
					"type": "text"
				},
				{
					"buffer": 110,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3491,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 86,
					"type": "text"
				},
				{
					"buffer": 111,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_gauss_newton.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2177,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 85,
					"type": "text"
				},
				{
					"buffer": 112,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6704,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 84,
					"type": "text"
				},
				{
					"buffer": 113,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_levenberg.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3815,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 83,
					"type": "text"
				},
				{
					"buffer": 114,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_property.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2593,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 82,
					"type": "text"
				},
				{
					"buffer": 115,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2731,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 116,
					"file": "Thirdparty/g2o/g2o/core/optimization_algorithm_with_hessian.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3537,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 81,
					"type": "text"
				},
				{
					"buffer": 117,
					"file": "Thirdparty/g2o/g2o/core/parameter.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2166,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 118,
					"file": "Thirdparty/g2o/g2o/core/parameter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1587,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 80,
					"type": "text"
				},
				{
					"buffer": 119,
					"file": "Thirdparty/g2o/g2o/core/parameter_container.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2827,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 120,
					"file": "Thirdparty/g2o/g2o/core/parameter_container.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4459,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 79,
					"type": "text"
				},
				{
					"buffer": 121,
					"file": "Thirdparty/g2o/g2o/core/robust_kernel.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2835,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 122,
					"file": "Thirdparty/g2o/g2o/core/robust_kernel.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1670,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 78,
					"type": "text"
				},
				{
					"buffer": 123,
					"file": "Thirdparty/g2o/g2o/core/robust_kernel_factory.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4749,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 124,
					"file": "Thirdparty/g2o/g2o/core/robust_kernel_factory.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3401,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 77,
					"type": "text"
				},
				{
					"buffer": 125,
					"file": "Thirdparty/g2o/g2o/core/robust_kernel_impl.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4678,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 126,
					"file": "Thirdparty/g2o/g2o/core/robust_kernel_impl.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4973,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 76,
					"type": "text"
				},
				{
					"buffer": 127,
					"file": "Thirdparty/g2o/g2o/core/solver.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2610,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"type": "text"
				},
				{
					"buffer": 128,
					"file": "Thirdparty/g2o/g2o/core/solver.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5444,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"type": "text"
				},
				{
					"buffer": 129,
					"file": "Thirdparty/g2o/g2o/core/sparse_block_matrix.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9514,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"type": "text"
				},
				{
					"buffer": 130,
					"file": "Thirdparty/g2o/g2o/core/sparse_block_matrix.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25490,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"type": "text"
				},
				{
					"buffer": 131,
					"file": "Thirdparty/g2o/g2o/core/sparse_block_matrix_ccs.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10801,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"type": "text"
				},
				{
					"buffer": 132,
					"file": "Thirdparty/g2o/g2o/core/sparse_block_matrix_diagonal.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4184,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"type": "text"
				},
				{
					"buffer": 133,
					"file": "Thirdparty/g2o/g2o/core/sparse_block_matrix_test.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3192,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				},
				{
					"buffer": 134,
					"file": "Thirdparty/g2o/g2o/core/sparse_optimizer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12602,
						"regions":
						{
						},
						"selection":
						[
							[
								7675,
								7675
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										7686,
										7687
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										7675,
										7676
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3506.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 135,
					"file": "Thirdparty/g2o/g2o/core/sparse_optimizer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20717,
						"regions":
						{
						},
						"selection":
						[
							[
								1940,
								1940
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1942,
										1943
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1940,
										1941
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 580.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 150.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 163.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 401.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 58.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"tra",
				"include/Tracking.h"
			],
			[
				"s",
				"src/System.cc"
			],
			[
				"map",
				"include/MapPoint.h"
			],
			[
				"local",
				"src/LocalMapping.cc"
			],
			[
				"",
				"src/Sim3Solver.cc"
			],
			[
				"ros",
				"Examples/ROS/ORB_SLAM2/src/ros_stereo.cc"
			],
			[
				"sy",
				"include/System.h"
			],
			[
				"opti",
				"src/Optimizer.cc"
			],
			[
				"loo",
				"include/LoopClosing.h"
			],
			[
				"ini",
				"src/Initializer.cc"
			],
			[
				"lo",
				"src/LocalMapping.cc"
			],
			[
				"fra",
				"include/Frame.h"
			],
			[
				"loa",
				"src/LocalMapping.cc"
			],
			[
				"mapd",
				"src/MapDrawer.cc"
			],
			[
				"tr",
				"include/Tracking.h"
			],
			[
				"key",
				"src/KeyFrameDatabase.cc"
			],
			[
				"orbv",
				"include/ORBVocabulary.h"
			],
			[
				"or",
				"src/ORBextractor.cc"
			],
			[
				"orb",
				"src/ORBmatcher.cpp"
			],
			[
				"orbe",
				"src/ORBextractor.cpp"
			],
			[
				"ster",
				"Examples/ROS/ORB_SLAM2/src/ros_stereo.cc"
			],
			[
				"stereo",
				"Examples/Stereo/stereo_kitti.cpp"
			],
			[
				"stre",
				"Examples/ROS/ORB_SLAM2/src/ros_stereo.cc"
			],
			[
				"sys",
				"src/System.cpp"
			],
			[
				"syste",
				"src/utils/system.h"
			],
			[
				"tereo",
				"utils/stereo_slam.cpp"
			],
			[
				"cmak",
				"~/project_ws/ucoslam-1.0.8/utils/CMakeLists.txt"
			],
			[
				"orbm",
				"include\\ORBmatcher.h"
			],
			[
				"VIEWER",
				"Examples\\ROS\\ORB_SLAM2\\src\\AR\\ViewerAR.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 625.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 475.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 226.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
